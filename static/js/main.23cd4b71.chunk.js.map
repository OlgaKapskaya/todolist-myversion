{"version":3,"sources":["components/Todolist.module.css","components/universal_components/UniversalButton.module.css","components/universal_components/UniversalInput.module.css","trash.svg","components/universal_components/UniversalButton.tsx","components/universal_components/UniversalCheckbox.tsx","components/universal_components/UniversalInput.tsx","components/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","UniversalButton","props","styleName","style","s","deleteButton","activeFilter","defaultButton","className","onClick","callback","name","image","img","src","alt","UniversalCheckbox","type","checked","onChange","event","currentTarget","UniversalInput","useState","error","setError","errorMessage","inputError","input","value","onChangeText","trim","onKeyPress","key","onEnter","onBlur","Todolist","text","setText","buttonName","setButtonName","onClickAddTaskHandler","addTask","todolistID","todolistContainer","todolistTitleContainer","del","deleteTodolist","title","tasks","length","emptyMessage","map","elem","id","isDone","deleteTask","changeStatus","onChangeStatusHandler","changeFilter","App","todolistID1","v1","todolistID2","filter","todolists","setTodolists","setTasks","titleTodolist","setTitleTodolist","idTask","newTask","addTodolist","newTodolist","todo","filteredTasks","onChangeTodolistTitle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.23cd4b71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistContainer\":\"Todolist_todolistContainer__jMNyM\",\"todolistTitleContainer\":\"Todolist_todolistTitleContainer__2LNoh\",\"error\":\"Todolist_error__1X3LG\",\"errorMessage\":\"Todolist_errorMessage__22mHY\",\"emptyMessage\":\"Todolist_emptyMessage__1i0Gm\",\"isDone\":\"Todolist_isDone__rlRX3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultButton\":\"UniversalButton_defaultButton__3CCkw\",\"deleteButton\":\"UniversalButton_deleteButton__1Nonv\",\"activeFilter\":\"UniversalButton_activeFilter__2bj_a\",\"img\":\"UniversalButton_img__3CRrj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"UniversalInput_errorMessage__2cF7g\",\"input\":\"UniversalInput_input__3HBAU\",\"inputError\":\"UniversalInput_inputError__1Nczh\"};","module.exports = __webpack_public_path__ + \"static/media/trash.0a97d6f9.svg\";","import React from \"react\";\nimport s from './UniversalButton.module.css'\n\ntype UniversalButtonProps = {\n    name: string\n    callback: () => void\n    image?: string\n    style?: 'active' | 'delete' | ''\n}\nexport const UniversalButton = (props: UniversalButtonProps) => {\n    const onClickDelHandler = () => {\n        props.callback()\n    }\n    const styleName = props.style === 'delete' ? s.deleteButton : props.style === 'active' ? s.activeFilter : s.defaultButton\n\n\n    return (\n        <button className={styleName} onClick={onClickDelHandler} >{props.name}\n            {props.image && <img className={s.img} src={props.image} alt={'delete item'}/>}\n        </button>\n    )\n}","import React, {ChangeEvent} from \"react\";\ntype UniversalCheckboxProps = {\n    checked: boolean\n    callback: (isDone: boolean) => void\n}\nexport const UniversalCheckbox = (props: UniversalCheckboxProps) => {\n    const onChangeStatusHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.callback(event.currentTarget.checked)\n    }\n    return (\n        <input type=\"checkbox\" checked={props.checked} onChange={onChangeStatusHandler}/>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport s from './UniversalInput.module.css'\n\n\ntype UniversalInputProps = {\n    value: string\n    onChangeText: (text: string) => void\n    onEnter: () => void\n    error: string\n}\nexport const UniversalInput = (props: UniversalInputProps) => {\n    const [error, setError] = useState<string>('');\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        props.onChangeText(event.currentTarget.value)\n        if (event.currentTarget.value.trim() !== '') setError('')\n        else setError(props.error)\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            props.onEnter()\n        }\n    }\n    const onBlurHandler = () => {\n        setError('')\n    }\n\n    return (\n        <>\n            {error && <div className={s.errorMessage}>{error}</div>}\n            <input\n                className={error ? s.inputError : s.input}\n                value={props.value}\n                onChange={onChangeInputHandler}\n                onKeyPress={onKeyPressHandler}\n                onBlur={onBlurHandler}/>\n\n        </>\n    )\n}","import React, {useState} from \"react\";\nimport {FilterType, TasksType} from \"../App\";\nimport s from './Todolist.module.css'\nimport {UniversalButton} from \"./universal_components/UniversalButton\";\nimport {UniversalCheckbox} from \"./universal_components/UniversalCheckbox\";\nimport {UniversalInput} from \"./universal_components/UniversalInput\";\nimport del from '../trash.svg'\n\ntype TodolistProps = {\n    todolistID: string\n    key: string\n    title: string\n    tasks: TasksType[]\n    deleteTask: (idTask: string, todolistID: string) => void\n    changeFilter: (buttonName: FilterType, todolistID: string) => void\n    addTask: (title: string, todolistID: string) => void\n    changeStatus: (idTask: string, isDone: boolean, todolistID: string) => void\n    deleteTodolist: (todolistID: string) => void\n}\n\nexport const Todolist = (props: TodolistProps) => {\n\n    const [text, setText] = useState('') //for input\n    const [buttonName, setButtonName] = useState('all'); //for filter-buttons\n    const onClickALLHandler = () => {\n        props.changeFilter('all', props.todolistID)\n        setButtonName('all')\n    }\n    const onClickActiveHandler = () => {\n        props.changeFilter('active', props.todolistID)\n        setButtonName('active')\n    }\n    const onClickCompletedHandler = () => {\n        props.changeFilter('completed', props.todolistID)\n        setButtonName('completed')\n    }\n\n    const onClickAddTaskHandler = () => {\n        if (text.trim() !== '') {\n            props.addTask(text.trim(), props.todolistID)\n            setText('')\n        } else {\n            setText('')\n        }\n    }\n    const onKeyPressHandler = () => {\n        onClickAddTaskHandler()\n    }\n\n    return (\n        <div className={s.todolistContainer}>\n            <div className={s.todolistTitleContainer}>\n                <UniversalButton name={'delete todolist '} image={del} callback={() => props.deleteTodolist(props.todolistID)}/>\n                <h3>{props.title}</h3>\n            </div>\n            <div>\n                <UniversalInput\n                    value={text}\n                    onEnter={onKeyPressHandler}\n                    onChangeText={setText}\n                    error={'Enter task title'}/>\n                <UniversalButton name={'ADD'} callback={onClickAddTaskHandler}/>\n\n            </div>\n\n            {props.tasks.length === 0 ? <span className={s.emptyMessage}> Task list is empty </span> : <ul>\n                {props.tasks.map(elem => {\n\n                    const onClickDelHandler = () => {\n                        props.deleteTask(elem.id, props.todolistID)\n                    }\n                    const onChangeStatusHandler = (isDone: boolean) => {\n                        props.changeStatus(elem.id, isDone, props.todolistID)\n                    }\n\n                    return (\n                        <li key={elem.id} className={elem.isDone ? s.isDone : \"\"}>\n                            <UniversalButton name={''} image={del} callback={onClickDelHandler} style={'delete'}/>\n                            <UniversalCheckbox checked={elem.isDone}\n                                               callback={(isDone) => onChangeStatusHandler(isDone)}/>\n                            <span>{elem.title}</span>\n                        </li>\n                    )\n                })}\n\n            </ul>}\n\n            <div>\n                <UniversalButton name={'All'} callback={onClickALLHandler}\n                                 style={buttonName === 'all' ? 'active' : ''}/>\n                <UniversalButton name={'Active'} callback={onClickActiveHandler}\n                                 style={buttonName === 'active' ? 'active' : ''}/>\n                <UniversalButton name={'Completed'} callback={onClickCompletedHandler}\n                                 style={buttonName === 'completed' ? 'active' : ''}/>\n            </div>\n        </div>\n    )\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {UniversalInput} from \"./components/universal_components/UniversalInput\";\r\nimport {UniversalButton} from \"./components/universal_components/UniversalButton\";\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodolistTasksType = {\r\n    [todolistID: string]: TasksType[]\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TodolistTasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    const [titleTodolist, setTitleTodolist] = useState('')\r\n\r\n    const deleteTask = (idTask: string, todolistID: string) => {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(elem => elem.id !== idTask)})\r\n    }\r\n    const changeFilter = (buttonName: FilterType, todolistID: string) => {\r\n        setTodolists(todolists.map(elem => {\r\n            return (\r\n                elem.id === todolistID ? {...elem, filter: buttonName} : elem\r\n            )\r\n        }))\r\n    }\r\n    const addTask = (title: string, todolistID: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todolistID]: [newTask, ...tasks[todolistID]]})\r\n    }\r\n    const changeStatus = (idTask: string, isDone: boolean, todolistID: string) => {\r\n        setTasks({\r\n            ...tasks, [todolistID]: tasks[todolistID].map(elem => {\r\n                return (\r\n                    elem.id === idTask ? {...elem, isDone: isDone} : elem\r\n                )\r\n            })\r\n        })\r\n    }\r\n    const deleteTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter( elem => elem.id !== todolistID))\r\n    }\r\n    const addTodolist = () => {\r\n        if (titleTodolist !== ''){\r\n            let newTodolist:TodolistsType = {id: v1(), title: titleTodolist, filter: 'all'}\r\n            setTodolists([newTodolist, ...todolists])\r\n            setTasks({...tasks, [newTodolist.id]: []})\r\n            setTitleTodolist('')\r\n        }\r\n\r\n    }\r\n    const onChangeTodolistTitle = (text: string) => {\r\n        setTitleTodolist(text)\r\n    }\r\n    const onKeyPressTodolistTitle = () => {\r\n        addTodolist()\r\n    }\r\n\r\n    let todo = todolists.map(elem => {\r\n        //фильтрация кнопок\r\n        let filteredTasks = tasks[elem.id]\r\n        if (elem.filter === 'all') {\r\n            filteredTasks = tasks[elem.id]\r\n        }\r\n        if (elem.filter === 'active') {\r\n            filteredTasks = tasks[elem.id].filter(elem => !elem.isDone)\r\n        }\r\n        if (elem.filter === 'completed') {\r\n            filteredTasks = tasks[elem.id].filter(elem => elem.isDone)\r\n        }\r\n\r\n        return (\r\n            <Todolist todolistID={elem.id}\r\n                      key={elem.id}\r\n                      title={elem.title}\r\n                      tasks={filteredTasks}\r\n                      deleteTask={deleteTask}\r\n                      changeFilter={changeFilter}\r\n                      addTask={addTask}\r\n                      changeStatus={changeStatus}\r\n                      deleteTodolist={deleteTodolist}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <div className={'headerContainer'}>\r\n                    <UniversalInput error={\"Enter todolist title\"}\r\n                                    value={titleTodolist}\r\n                                    onChangeText={(text) => onChangeTodolistTitle(text)}\r\n                                    onEnter={onKeyPressTodolistTitle}/>\r\n                    <UniversalButton name={'ADD TODOLIST'} callback={addTodolist}/>\r\n                </div>\r\n            </header>\r\n            <div className=\"App\">\r\n                {todo}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}