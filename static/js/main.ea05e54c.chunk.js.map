{"version":3,"sources":["common/constants/instanceAPI.ts","common/hooks/hooks.ts","api/authAPI.ts","bll/reducers/appReducer.ts","common/utils/errorUtils.ts","bll/reducers/authReducer.ts","common/types/types.ts","features/Login/Login.tsx","api/todolistAPI.ts","bll/reducers/tasksReducer.ts","common/components/EditSpan/EditSpan.tsx","common/components/Datepicker/Datepicker.tsx","features/TodolistList/Todolist/Tasks/Task.tsx","bll/reducers/todolistsReducer.ts","common/components/Input/Input.tsx","features/TodolistList/Todolist/Todolist.tsx","app/hooks/useTodolists.ts","features/TodolistList/TodolistList.tsx","app/AppRoutes/AppRoutes.tsx","common/components/NavBar/NavBar.tsx","app/App.tsx","bll/store.ts","index.tsx","features/Login/Login.module.css","features/TodolistList/Todolist/Tasks/Task.module.css","features/TodolistList/Todolist/Todolist.module.css","common/components/Datepicker/Datepicker.module.css"],"names":["ResponseResulCode","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","authAPI","payload","post","get","delete","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","setInitializedAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","TaskStatuses","TaskPriorities","isLoggedIn","setIsLoggedInAC","value","Login","navigate","useNavigate","state","auth","useForm","defaultValues","email","password","rememberMe","register","handleSubmit","errors","formState","Stack","gap","className","Form","onSubmit","res","resultCode","OK","Group","Label","href","target","FloatingLabel","controlId","label","Control","placeholder","required","pattern","s","error_message","role","minLength","Check","Button","variant","todolistAPI","title","todolistID","put","taskID","task","initState","updateTaskTC","updateTaskModel","getState","tasks","find","elem","id","model","description","priority","startDate","deadline","then","updateTaskAC","item","console","warn","EditSpan","memo","onChangeText","useState","isEditMode","setIsEditMode","text","setText","offEditMode","changeText","size","as","onChange","event","currentTarget","onBlur","onKeyPress","key","autoFocus","onDoubleClick","Datepicker","date","changeDate","dayjs","format","newDate","slice","datepicker","Task","Accordion","Header","accHeader","RiDeleteBin6Line","onClick","todoListId","removeTaskAC","deleteButton","Body","addedDate","ListGroup","Item","init_state","getTodolictsTC","todolists","catch","e","Input","withButton","addItem","setValue","isError","setIsError","addItemHandler","trim","Text","muted","Todolist","todolist","changeTodolistFilter","useEffect","setTasksAC","items","filter","t","New","Completed","changeTodolistTitle","useCallback","changeTodolistTitleAC","changeTodolistTitleTC","addTask","addTaskTC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","container","Card","style","width","textAlign","removeTodolistAC","Title","map","Footer","cardFooter","useTodolists","addTodolist","addTodolistTC","changeTodolistFilterAC","TodolistList","AppRoutes","path","element","to","NavBar","Navbar","bg","expand","Container","Brand","App","app","finally","ProgressBar","animated","now","position","top","Spinner","animation","rootReducer","combineReducers","action","entityStatus","tl","stateCopy","forEach","store","legacy_createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ea05e54c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"a3689f8d-4bdb-4cdd-9a1a-83733437adfc\"\n    }\n})\n\nexport enum ResponseResulCode {\n    OK = 0,\n    Error = 1,\n    Captcha = 10\n}\nexport type ResponseType<D = {}> = {\n    data: D\n    fieldsErrors: string[]\n    messages: string[]\n    resultCode: number\n}","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {ActionsAppType} from \"../types/types\";\nimport {AppRootStateType} from \"../../bll/store\";\n\nexport const useAppDispatch: () => ThunkDispatch<AppRootStateType, any, ActionsAppType> = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> =  useSelector","import {LoginPayloadType} from \"../common/types/types\";\nimport {instance, ResponseType} from \"../common/constants/instanceAPI\";\n\ntype AuthMeResponseType = {\n    id: number\n    login: string\n    email: string\n}\nexport const authAPI = {\n    login(payload: LoginPayloadType ){\n        return instance.post<ResponseType<{userId: string}>>('/auth/login', payload)\n    },\n    me(){\n        return instance.get('auth/me')\n    },\n    logout(){\n        return instance.delete('/auth/login')\n    }\n}","import {RequestStatusType} from \"../../common/types/types\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppAT): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case \"APP/SET-INITIALIZED\":\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return {...state}\n    }\n}\n\n\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    isInitialized: boolean\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\nexport type AppAT =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | ReturnType<typeof setInitializedAC>","import {\n    setAppErrorAC,\n    SetAppErrorActionType,\n    setAppStatusAC,\n    SetAppStatusActionType\n} from \"../../bll/reducers/appReducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../constants/instanceAPI\";\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC('failed'))\n}","import {LoginPayloadType} from \"../../common/types/types\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/authAPI\";\nimport {ResponseResulCode} from \"../../common/constants/instanceAPI\";\nimport {AppAT, setAppStatusAC, setInitializedAC} from \"./appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/utils/errorUtils\";\n\nconst initialState = {\n    isLoggedIn: false,\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthAT): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (payload: LoginPayloadType) => async (dispatch: Dispatch<AuthAT>) => {\n    dispatch(setAppStatusAC('loading'))\n    try {\n        const res = await authAPI.login(payload)\n        if (res.data.resultCode === ResponseResulCode.OK) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (error) {\n        //@ts-ignore\n        handleServerNetworkError(error, dispatch)\n    }\n}\n\nexport const meTC = () => (dispatch: Dispatch<AuthAT>) => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(setInitializedAC(false))\n    authAPI.me()\n        .then((res) => {\n            if (res.data.resultCode === ResponseResulCode.OK) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n        .finally(() => dispatch(setInitializedAC(true)))\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<AuthAT>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === ResponseResulCode.OK) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// types\nexport type AuthAT = ReturnType<typeof setIsLoggedInAC> | AppAT","import {TodolistsAT} from \"../../bll/reducers/todolistsReducer\";\nimport {TasksAT} from \"../../bll/reducers/tasksReducer\";\nimport {AppAT} from \"../../bll/reducers/appReducer\";\nimport {AuthAT} from \"../../bll/reducers/authReducer\";\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type TodolistAppType = TodolistType & {\n    filter : FilterType\n    entityStatus: RequestStatusType\n}\n\nexport type TaskType = {\n    id: string\n    todoListId: string\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\nexport type TaskAppType = {\n    [key: string] : TaskType[]\n}\n\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type FilterType = \"all\" | \"active\" | \"completed\"\nexport type ActionsAppType = TodolistsAT | TasksAT | AuthAT | AppAT\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type LoginPayloadType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}","import React, {FC} from \"react\";\nimport {Button, Card, FloatingLabel, Form, FormLabel, Stack} from \"react-bootstrap\";\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\nimport {useNavigate} from \"react-router-dom\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\nimport s from \"./Login.module.css\"\nimport {loginTC} from \"../../bll/reducers/authReducer\";\n\n\ninterface ILoginForm {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const Login: FC = () => {\n    const dispatch = useAppDispatch()\n    const navigate = useNavigate()\n\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    isLoggedIn && navigate('/')\n\n    const {register, handleSubmit, formState: {errors}} = useForm<ILoginForm>({\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n\n    });\n    const onSubmit: SubmitHandler<ILoginForm> = (data) => {\n        dispatch(loginTC({...data}))\n    }\n\n\n    return (\n        <Stack gap={3} className=\"col-md-3 mx-auto\">\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Form.Group>\n                    <Form.Label >\n                        <p>To log in get registered\n                            <a href='https://social-network.samuraijs.com/'\n                               target='_blank'> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </Form.Label>\n                    <hr/>\n                    <FloatingLabel\n                        controlId=\"floatingInput\"\n                        label=\"Enter email\"\n                        className=\"mb-3\"\n                    >\n                    <Form.Control type=\"email\"\n                                  placeholder=\"Enter email\"\n                                  {...register(\"email\", {\n                                      required: true,\n                                      pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n                                  })}\n                    />\n                    </FloatingLabel>\n                    {errors.email?.type === 'required' &&\n                        <p className={s.error_message} role=\"alert\">Email is required</p>}\n                    {errors.email?.type === 'pattern' &&\n                        <p className={s.error_message} role=\"alert\">Email is not valid</p>}\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                    <FloatingLabel\n                        controlId=\"floatingInput\"\n                        label=\"Enter password\"\n                        className=\"mb-3\"\n                    >\n                    <Form.Control type=\"password\"\n                                  placeholder=\"Password\"\n                                  {...register(\"password\", {\n                                      required: true,\n                                      minLength: 3\n                                  })}\n                    />\n                    </FloatingLabel>\n                    {errors.password?.type === 'required' &&\n                        <p className={s.error_message} role=\"alert\">Password is required</p>}\n                    {errors.password?.type === 'minLength' &&\n                        <p className={s.error_message} role=\"alert\">Password should be more 3 symbols</p>}\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                    <Form.Check type=\"checkbox\"\n                                label=\"Remember me\"\n                                {...register(\"rememberMe\")}\n                    />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </Stack>\n    )\n}","import {TaskType, TodolistType, UpdateTaskType} from \"../common/types/types\";\nimport {instance, ResponseType} from \"../common/constants/instanceAPI\";\nimport {AxiosResponse} from \"axios\";\n\n\ntype GetTasksResponseType = {\n    items: TaskType[]\n    totalCount: number\n    error: string | null\n}\n\n\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>(\"todo-lists\")\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>(\"todo-lists\", {title})\n    },\n    deleteTodolist(todolistID: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}`)\n    },\n    updateTodolistTitle(todolistID: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistID}`, {title})\n    },\n    getTasks(todolistID: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`)\n    },\n    createTask(todolistID: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title})\n    },\n    deleteTask(todolistID: string, taskID: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistID}/tasks/${taskID}`)\n    },\n    updateTask(todolistID: string, taskID: string, task: UpdateTaskType) {\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistID}/tasks/${taskID}`, task)\n    }\n}","import {TaskAppType, TaskPriorities, TaskStatuses, TaskType, UpdateTaskType} from \"../../common/types/types\";\nimport {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from \"./todolistsReducer\";\nimport {todolistAPI} from \"../../api/todolistAPI\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../store\";\n\nexport type UpdateTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksAT = RemoveTaskAT | AddTaskAT\n    | AddTodolistAT | RemoveTodolistAT\n    | SetTodolistsAT | SetTasksAT | UpdateTaskAT\n\n//action types\ntype RemoveTaskAT = ReturnType<typeof removeTaskAC>\ntype AddTaskAT = ReturnType<typeof addTaskAC>\ntype SetTasksAT = ReturnType<typeof setTasksAC>\ntype UpdateTaskAT = ReturnType<typeof updateTaskAC>\n\n\nconst initState: TaskAppType = {}\n\nexport const tasksReducer = (state = initState, action: TasksAT): TaskAppType => {\n    switch (action.type) {\n        case \"REMOVE_TASK\":\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)}\n        case \"ADD_TASK\":\n            return {\n                ...state,\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\n            }\n        case \"ADD_TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE_TODOLIST\": {\n            let stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        case \"SET_TODOLISTS\": {\n            const stateCopy = {...state}\n            action.todolists.forEach((elem) => {\n                stateCopy[elem.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET_TASKS\": {\n            return {...state, [action.todolistID]: action.tasks}\n        }\n        case \"UPDATE_TASK\": {\n            return {\n                ...state,\n                [action.task.todoListId]: state[action.task.todoListId].map(elem => elem.id === action.task.id\n                    ? {...action.task}\n                    : elem)\n            }\n        }\n        default:\n            return state\n    }\n}\n\n//action creators\nexport const removeTaskAC = (taskID: string, todolistID: string) => {\n    return {type: \"REMOVE_TASK\", taskID, todolistID} as const\n}\nexport const addTaskAC = (task: TaskType) => {\n    return {type: \"ADD_TASK\", task} as const\n}\nexport const setTasksAC = (todolistID: string, tasks: TaskType[]) => {\n    return {type: \"SET_TASKS\", todolistID, tasks} as const\n}\nexport const updateTaskAC = (task: TaskType) => {\n    return {type: \"UPDATE_TASK\", task} as const\n}\n\n//thunk creators\nexport const setTasksTC = (todolistID: string) => (dispatch: Dispatch<TasksAT>) => {\n    todolistAPI.getTasks(todolistID)\n        .then((res) => {\n            dispatch(setTasksAC(todolistID, res.data.items))\n        })\n}\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: Dispatch<TasksAT>) => {\n    todolistAPI.createTask(todolistID, title)\n        .then((res) => {\n            dispatch(addTaskAC(res.data.data.item))\n        })\n}\nexport const deleteTaskTC = (todolistID: string, taskID: string) => (dispatch: Dispatch<TasksAT>) => {\n    todolistAPI.deleteTask(todolistID, taskID)\n        .then((res) => {\n            if (res.data.resultCode === 0)\n                dispatch(removeTaskAC(taskID, todolistID))\n        })\n}\nexport const updateTaskTC = (todolistID: string, taskID: string, updateTaskModel: UpdateTaskModelType) =>\n    (dispatch: Dispatch<TasksAT>, getState: () => AppRootStateType) => {\n        const task = getState().tasks[todolistID].find(elem => elem.id === taskID)\n        if (task) {\n            const model: UpdateTaskType = {\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline,\n                ...updateTaskModel\n            }\n            todolistAPI.updateTask(todolistID, taskID, model)\n                .then((res) => {\n                    if (res.data.resultCode === 0)\n                        // dispatch(changeTaskTitleAC(todolistID, taskID, title))\n                        dispatch(updateTaskAC(res.data.data.item))\n                })\n        } else {\n            console.warn(\"Task not found in the state!!!\")\n            return\n        }\n    }\n","import React, {FC, useState, KeyboardEvent, ChangeEvent, memo} from \"react\";\nimport { Form } from \"react-bootstrap\";\n\ntype EditSpanPropsType = {\n    title: string\n    onChangeText: (title: string) => void\n}\nexport const EditSpan: FC<EditSpanPropsType> = memo(({title, onChangeText}) => {\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\n    const [text, setText] = useState<string>(\"\")\n\n    const onEditMode = (): void => {\n        setText(title)\n        setIsEditMode(true)\n    }\n    const offEditMode = (): void => {\n        setIsEditMode(false)\n        changeText()\n    }\n    const changeText = (): void => {\n        if (text !== \"\") {\n            onChangeText(text)\n            setIsEditMode(false)\n        }\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        if (event.key === \"Enter\") {\n            changeText()\n            offEditMode()\n        }\n    }\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setText(event.currentTarget.value)\n    }\n    return (\n        <>\n            {\n                isEditMode ?\n                    <Form.Control type=\"text\"\n                                  size=\"sm\"\n                                  as=\"input\"\n                                  value={text}\n                                  onChange={onChangeHandler}\n                                  onBlur={offEditMode}\n                                  onKeyPress={onKeyPressHandler}\n                                  autoFocus\n                    />\n\n                    : <span onDoubleClick={onEditMode}> {title} </span>\n            }\n        </>\n    )\n})","import React, {ChangeEvent, FC} from \"react\";\nimport dayjs from \"dayjs\";\nimport s from \"./Datepicker.module.css\"\n\ntype DatepickerPropsType = {\n    date: string\n    changeDate: (date: string) => void\n}\nexport const Datepicker: FC<DatepickerPropsType> = ({date, changeDate}) => {\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>): void => {\n        const newDate = dayjs(event.currentTarget.value).format().slice(0, -6)\n        changeDate(newDate)\n    }\n    return (\n            <input type=\"date\"\n                   value={dayjs(date).format(\"YYYY-MM-DD\")}\n                   onChange={onChangeHandler}\n                   className={s.datepicker}\n            />\n    )\n}","import React, {FC} from \"react\";\nimport {TaskType} from \"../../../../common/types/types\";\nimport {useAppDispatch} from \"../../../../common/hooks/hooks\";\nimport {Accordion, ListGroup} from \"react-bootstrap\";\nimport {RiDeleteBin6Line} from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\nimport {deleteTaskTC, updateTaskTC} from \"../../../../bll/reducers/tasksReducer\";\nimport s from \"./Task.module.css\"\nimport {EditSpan} from \"../../../../common/components/EditSpan/EditSpan\";\nimport dayjs from \"dayjs\";\nimport {Datepicker} from \"../../../../common/components/Datepicker/Datepicker\";\n\n\ntype TaskPropsType = {\n    task: TaskType\n}\nexport const Task: FC<TaskPropsType> = ({\n                                            task\n                                        }) => {\n    const dispatch = useAppDispatch()\n    const deleteTask = (): void => {\n        dispatch(deleteTaskTC(task.todoListId, task.id))\n    }\n    const updateTaskTitle = (title: string): void => {\n        dispatch(updateTaskTC(task.todoListId, task.id, {title}))\n    }\n    const onChangeStartDate = (date: string): void => {\n        dispatch(updateTaskTC(task.todoListId, task.id, {startDate: date}))\n    }\n    const onChangeDeadline = (date: string): void => {\n        dispatch(updateTaskTC(task.todoListId, task.id, {deadline: date}))\n    }\n\n\n    return (\n        <>\n            <Accordion>\n                <Accordion.Header className={s.accHeader}>\n                    <RiDeleteBin6Line onClick={deleteTask} className={s.deleteButton}/>\n                    {task.title}\n                </Accordion.Header>\n\n                <Accordion.Body>\n                    <span className={s.addedDate}>\n                        Created: {dayjs(task.addedDate).format(\"DD MMMM YYYY HH:mm:ss\")}\n                    </span>\n\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            Title: <EditSpan title={task.title} onChangeText={updateTaskTitle}/>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            Description: {task.description ? task.description : \"none\"}\n                        </ListGroup.Item>\n                        <ListGroup.Item>Status: {task.status}</ListGroup.Item>\n                        <ListGroup.Item>Priority: {task.priority}</ListGroup.Item>\n                        <ListGroup.Item>\n                            Start date:\n                            <Datepicker date={task.startDate} changeDate={onChangeStartDate}/>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            Deadline:\n                            <Datepicker date={task.deadline} changeDate={onChangeDeadline}/>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Accordion.Body>\n            </Accordion>\n        </>\n    )\n}","import {ActionsAppType, FilterType, RequestStatusType, TodolistAppType, TodolistType} from \"../../common/types/types\";\nimport {todolistAPI} from \"../../api/todolistAPI\";\nimport {Dispatch} from \"redux\";\nimport {setAppStatusAC} from \"./appReducer\";\nimport {handleServerNetworkError} from \"../../common/utils/errorUtils\";\n\n\n\nexport type TodolistsAT = AddTodolistAT | RemoveTodolistAT\n    | ChangeTodolistTitleAT | ChangeTodolistFilterAT | SetTodolistsAT | ReturnType<typeof changeTodolistEntityStatusAC>\n\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\ntype ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>\ntype ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\n\nconst init_state: TodolistAppType[] = []\n\nexport const todolistsReducer = (state = init_state, action: TodolistsAT): TodolistAppType[] => {\n    switch (action.type) {\n        case \"ADD_TODOLIST\":\n            return [{...action.todolist, filter: \"all\", entityStatus: 'idle'}, ...state]\n        case \"REMOVE_TODOLIST\":\n            return state.filter(elem => elem.id !== action.id)\n        case \"CHANGE_TODOLIST_TITLE\":\n            return state.map(elem => elem.id === action.id\n                ? {...elem, title: action.title}\n                : elem\n            )\n        case \"CHANGE_TODOLIST_FILTER\":\n            return state.map(elem => elem.id === action.id\n                ? {...elem, filter: action.filter}\n                : elem\n            )\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        case \"SET_TODOLISTS\":\n            return action.todolists.map(elem => ({...elem, filter: \"all\", entityStatus: 'idle'}))\n        default:\n            return state\n    }\n}\n//action creators\nexport const addTodolistAC = (todolist: TodolistType) => {\n    return {type: \"ADD_TODOLIST\", todolist} as const\n}\nexport const removeTodolistAC = (todolistID: string) => {\n    return {type: \"REMOVE_TODOLIST\", id: todolistID} as const\n}\nexport const changeTodolistTitleAC = (todolistID: string, title: string) => {\n    return {type: \"CHANGE_TODOLIST_TITLE\", id: todolistID, title} as const\n}\nexport const changeTodolistFilterAC = (todolistID: string, filter: FilterType) => {\n    return {type: \"CHANGE_TODOLIST_FILTER\", id: todolistID, filter} as const\n}\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\n    return {type: \"SET_TODOLISTS\", todolists} as const\n}\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\n} as const)\n\n//thunk creators\nexport const getTodolictsTC = () => (dispatch: Dispatch<ActionsAppType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.getTodolists()\n        .then((res) => {\n            dispatch(setTodolistsAC(res.data))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch((e) => {\n            handleServerNetworkError(e, dispatch)\n        })\n}\nexport const deleteTodolictsTC = (todolistID: string) => (dispatch: Dispatch<ActionsAppType>) => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(todolistID, 'loading'))\n    todolistAPI.deleteTodolist(todolistID)\n        .then((res) => {\n            dispatch(removeTodolistAC(todolistID))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsAppType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.createTodolist(title)\n        .then((res) => {\n            dispatch(addTodolistAC(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const changeTodolistTitleTC = (todolistID: string, title: string) => (dispatch: Dispatch<TodolistsAT>) => {\n    todolistAPI.updateTodolistTitle(todolistID, title)\n        .then((res) => {\n            dispatch(changeTodolistTitleAC(todolistID, title))\n        })\n}","import React, {ChangeEvent, KeyboardEvent, FC, useState, memo} from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\n\ntype InputPropsType = {\n    label: string\n    withButton?: boolean\n    addItem: (title: string) => void\n}\n/**\n * Creates a new input component\n *\n * params:\n *\n * label: string - required - plaseholder text\n *\n * addItem: ( arg: string ) => void - required - add value function\n *\n * withButton: boolean - draw input with button\n *\n */\nexport const Input: FC<InputPropsType> = memo(({\n                                                   label,\n                                                   withButton,\n                                                   addItem\n                                               }) => {\n    const [value, setValue] = useState<string>(\"\")\n    const [isError, setIsError] = useState<string>(\"\")\n\n    const addItemHandler = (): void => {\n        if (value.trim() !== \"\") {\n            addItem(value.trim());\n            setValue(\"\");\n        } else {\n            setIsError(\"Incorrect value\")\n        }\n    }\n\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setValue(event.currentTarget.value)\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setIsError(\"\")\n        if (event.key === \"Enter\") {\n            addItemHandler();\n            setValue(\"\");\n        }\n    }\n\n    return (\n        <>\n            <Form.Control type=\"text\"\n                          size=\"sm\"\n                          as=\"input\"\n                          value={value}\n                          placeholder={label}\n                          onChange={onChangeHandler}\n                          onBlur={() => setIsError(\"\")}\n                          onKeyPress={onKeyPressHandler}\n            />\n            {\n                isError\n                && <Form.Text muted>\n                    {isError}\n                </Form.Text>\n            }\n            {\n                withButton\n                && <Button variant=\"primary\"\n                           size=\"sm\"\n                           onClick={addItemHandler}>\n                    Add\n                </Button>\n            }\n        </>\n    )\n})","import React, {FC, memo, useCallback, useEffect} from \"react\";\nimport {FilterType, TaskStatuses, TaskType, TodolistAppType} from \"../../../common/types/types\";\nimport {Button, Card} from \"react-bootstrap\";\nimport {RiDeleteBin6Line} from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\nimport {useAppDispatch, useAppSelector} from \"../../../common/hooks/hooks\";\nimport {Task} from \"./Tasks/Task\";\nimport {addTaskTC, setTasksTC} from \"../../../bll/reducers/tasksReducer\";\nimport s from \"./Todolist.module.css\"\nimport {changeTodolistTitleTC, deleteTodolictsTC} from \"../../../bll/reducers/todolistsReducer\";\nimport {EditSpan} from \"../../../common/components/EditSpan/EditSpan\";\nimport {Input} from \"../../../common/components/Input/Input\";\n\ntype TodolistType = {\n    todolist: TodolistAppType\n    changeTodolistFilter: (todolistID: string, filter: FilterType) => void\n}\nexport const Todolist: FC<TodolistType> = memo(({\n                                                    todolist,\n                                                    changeTodolistFilter\n                                                }) => {\n    const dispatch = useAppDispatch()\n    useEffect(() => {\n        dispatch(setTasksTC(todolist.id))\n    }, [todolist.id, dispatch])\n\n    let tasks = useAppSelector<TaskType[]>(state => state.tasks[todolist.id])\n    if (todolist.filter === \"active\") {\n        tasks = tasks.filter(t => t.status === TaskStatuses.New);\n    }\n    if (todolist.filter === \"completed\") {\n        tasks = tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n    const deleteTodolist = (): void => {\n        dispatch(deleteTodolictsTC(todolist.id))\n    }\n    const changeTodolistTitle = useCallback((title: string): void => {\n        dispatch(changeTodolistTitleTC(todolist.id, title))\n    }, [dispatch, todolist.id])\n    const addTask = useCallback((title: string): void => {\n        dispatch(addTaskTC(todolist.id, title))\n    }, [dispatch, todolist.id])\n\n    const onAllClickHandler = useCallback(() => changeTodolistFilter(todolist.id, \"all\"), [todolist.id, changeTodolistFilter])\n    const onActiveClickHandler = useCallback(() => changeTodolistFilter(todolist.id, \"active\"), [todolist.id, changeTodolistFilter])\n    const onCompletedClickHandler = useCallback(() => changeTodolistFilter(todolist.id, \"completed\"), [todolist.id, changeTodolistFilter])\n\n    return (\n        <div className={s.container}>\n            <Card style={{width: \"100%\"}}>\n                <Card.Header style={{textAlign: \"right\"}}>\n                    <RiDeleteBin6Line onClick={deleteTodolist} className={s.deleteButton}/>\n                    <Card.Title style={{textAlign: \"left\"}}>\n                        <EditSpan title={todolist.title} onChangeText={changeTodolistTitle}/>\n                    </Card.Title>\n                </Card.Header>\n                <Input label=\"Add task\" addItem={addTask} withButton={true}/>\n                <Card.Body>\n                    {\n                        tasks.map(elem => <Task task={elem}\n                                                key={elem.id}\n                        />)\n                    }\n\n                </Card.Body>\n                <Card.Footer className={s.cardFooter}>\n                    <Button variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={onAllClickHandler}>\n                        all\n                    </Button>\n                    <Button variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={onActiveClickHandler}>\n                        active\n                    </Button>\n                    <Button variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={onCompletedClickHandler}>\n                        completed\n                    </Button>\n                </Card.Footer>\n            </Card>\n\n        </div>\n    )\n})","import {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\nimport {useCallback, useEffect} from \"react\";\nimport {addTodolistTC, changeTodolistFilterAC, getTodolictsTC} from \"../../bll/reducers/todolistsReducer\";\nimport {FilterType} from \"../../common/types/types\";\n\n\nexport const useTodolists = () => {\n    const dispatch = useAppDispatch()\n    const todolists = useAppSelector(state => state.todolists)\n\n    useEffect(() => {\n        dispatch(getTodolictsTC())\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string): void => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    const changeTodolistFilter = useCallback((todolistID: string, filter: FilterType): void => {\n        dispatch(changeTodolistFilterAC(todolistID, filter))\n    }, [dispatch])\n\n    return {todolists, addTodolist, changeTodolistFilter}\n}\n","import React, {FC, useEffect} from \"react\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {Input} from \"../../common/components/Input/Input\";\nimport {useTodolists} from \"../../app/hooks/useTodolists\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\nimport {getTodolictsTC} from \"../../bll/reducers/todolistsReducer\";\n\nexport const TodolistList: FC = () => {\n    const {todolists, addTodolist, changeTodolistFilter} = useTodolists()\n\n    const navigate = useNavigate()\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            dispatch(getTodolictsTC())\n        }\n    }, [])\n\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    !isLoggedIn && navigate('/login')\n\n    return (\n        <div>\n            <header className=\"AppHeader\">\n                <Input label=\"Add todolist\" addItem={addTodolist}/>\n            </header>\n            <div className=\"App\">\n\n                {\n                    todolists.map(elem => <Todolist todolist={elem}\n                                                    changeTodolistFilter={changeTodolistFilter}\n                                                    key={elem.id}\n                    />)\n                }\n            </div>\n        </div>\n    )\n}","import React, {FC} from \"react\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {Login} from \"../../features/Login/Login\";\nimport {TodolistList} from \"../../features/TodolistList/TodolistList\";\n\nexport const AppRoutes:FC = () => {\n    return (\n        <Routes>\n            <Route path='/' element={<TodolistList/>}/>\n            <Route path='login' element={<Login/>}/>\n            <Route path='*' element={<Navigate to='/404'/>}/>\n            <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\n        </Routes>\n    )\n}","import React, {FC} from \"react\";\nimport {Button, Container, Navbar} from \"react-bootstrap\";\nimport {useAppDispatch, useAppSelector} from \"../../hooks/hooks\";\nimport {logoutTC} from \"../../../bll/reducers/authReducer\";\n\nexport const NavBar: FC = () => {\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useAppDispatch()\n    const logOutHandler = () => {\n        dispatch(logoutTC())\n    }\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Container>\n                <Navbar.Brand href=\"/\" >Todolist App</Navbar.Brand>\n                {isLoggedIn && <Button onClick={logOutHandler}> Log out</Button>}\n            </Container>\n        </Navbar>\n    )\n}","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {AppRoutes} from \"./AppRoutes/AppRoutes\";\r\nimport {useAppDispatch, useAppSelector} from \"../common/hooks/hooks\";\r\nimport {RequestStatusType} from \"../common/types/types\";\r\nimport {meTC} from \"../bll/reducers/authReducer\";\r\nimport {ProgressBar, Spinner} from \"react-bootstrap\";\r\nimport {NavBar} from \"../common/components/NavBar/NavBar\";\r\n\r\n\r\nfunction App() {\r\n    const status = useAppSelector<RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useAppSelector<boolean>((state) => state.app.isInitialized)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(meTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <Spinner animation=\"border\" variant=\"primary\"/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            {status === 'loading' && <ProgressBar animated now={100}/>}\r\n            <AppRoutes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, legacy_createStore} from \"redux\";\nimport {todolistsReducer} from \"./reducers/todolistsReducer\";\nimport {tasksReducer} from \"./reducers/tasksReducer\";\nimport thunk from \"redux-thunk\"\nimport {appReducer} from \"./reducers/appReducer\";\nimport {authReducer} from \"./reducers/authReducer\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./app/App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_message\":\"Login_error_message__1y_Nd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accHeader\":\"Task_accHeader__2D5bw\",\"deleteButton\":\"Task_deleteButton__2NOfS\",\"addedDate\":\"Task_addedDate__1xXFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todolist_container__3GBGW\",\"deleteButton\":\"Todolist_deleteButton__1A7B9\",\"cardFooter\":\"Todolist_cardFooter__3sjJA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"datepicker\":\"Datepicker_datepicker__1KqY_\"};"],"sourceRoot":""}