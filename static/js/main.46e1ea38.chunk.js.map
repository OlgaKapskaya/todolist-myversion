{"version":3,"sources":["common/constants/instanceAPI.ts","common/hooks/hooks.ts","api/authAPI.ts","bll/reducers/appReducer.ts","common/utils/errorUtils.ts","bll/reducers/authReducer.ts","common/types/types.ts","features/Login/Login.tsx","common/components/EditSpan/EditSpan.tsx","api/todolistAPI.ts","bll/reducers/tasksReducer.ts","features/TodolistList/Todolist/Task/EditTaskForm/ModalWindow.tsx","features/TodolistList/Todolist/Task/hooks/useTaskLogic.ts","features/TodolistList/Todolist/Task/Task.tsx","features/TodolistList/Todolist/Task/hooks/useEditTaskForm.ts","bll/reducers/todolistsReducer.ts","common/components/Input/Input.tsx","features/TodolistList/Todolist/Todolist.tsx","app/hooks/useTodolists.ts","features/TodolistList/TodolistList.tsx","app/AppRoutes/AppRoutes.tsx","features/TodolistList/NavBar/NavBar.tsx","app/App.tsx","bll/store.ts","index.tsx","features/Login/Login.module.css","features/TodolistList/Todolist/Task/Task.module.css","features/TodolistList/Todolist/Todolist.module.css"],"names":["ResponseResulCode","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","authAPI","payload","post","get","delete","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","setInitializedAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","TaskStatuses","TaskPriorities","isLoggedIn","setIsLoggedInAC","value","Login","navigate","useNavigate","state","auth","useForm","defaultValues","email","password","rememberMe","register","handleSubmit","errors","formState","Stack","gap","className","Form","onSubmit","res","resultCode","OK","Group","Label","href","target","FloatingLabel","controlId","label","Control","placeholder","required","pattern","s","error_message","role","minLength","Check","Button","variant","EditSpan","memo","title","onChangeText","useState","isEditMode","setIsEditMode","text","setText","offEditMode","changeText","size","as","style","width","onChange","event","currentTarget","onBlur","onKeyPress","key","autoFocus","onDoubleClick","todolistAPI","todolistID","put","taskID","task","initState","updateTaskTC","updateTaskModel","getState","tasks","find","elem","id","model","description","priority","startDate","deadline","then","updateTaskAC","item","console","warn","EditTaskForm","show","onClose","control","Modal","aria-labelledby","centered","todoListId","Header","Title","Body","Select","New","InProgress","Completed","Draft","Low","Middle","Hi","Later","Urgently","Footer","onClick","useTaskLogic","statusColor","useMemo","statusBadgeColor","deleteTask","removeTaskAC","updateTaskTitle","taskStatusText","Task","setShow","useCallback","onOpen","useEditTaskForm","Card","margin","background","justifyContent","display","Badge","bg","Subtitle","addedDate","dayjs","format","Text","RiDeleteBin6Line","deleteButton","RiEditLine","init_state","getTodolictsTC","todolists","catch","e","Input","withButton","addItem","setValue","isError","setIsError","addItemHandler","trim","muted","Todolist","todolist","changeTodolistFilter","useEffect","setTasksAC","items","filter","t","changeTodolistTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTask","addTaskTC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","container","textAlign","removeTodolistAC","map","cardFooter","useTodolists","addTodolist","addTodolistTC","changeTodolistFilterAC","TodolistList","AppRoutes","path","element","to","NavBar","Navbar","expand","Container","Brand","App","app","finally","ProgressBar","animated","now","position","top","Spinner","animation","rootReducer","combineReducers","action","entityStatus","tl","stateCopy","forEach","store","legacy_createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","module","exports"],"mappings":";uJAUYA,E,kGCLCC,EAA6EC,IAC7EC,EAA0DC,I,iCDJ1DC,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SAIPV,O,WAAAA,I,iBAAAA,I,uBAAAA,M,KEFL,IAAMW,EAAU,SACbC,GACF,OAAOP,EAASQ,KAAqC,cAAeD,IAF/DD,EAAU,WAKf,OAAON,EAASS,IAAI,YALfH,EAAU,WAQf,OAAON,EAASU,OAAO,gBCdzBC,EAAiC,CACnCC,OAAQ,OACRC,MAAO,KACPC,eAAe,GAuBNC,EAAgB,SAACF,GAAD,MAA2B,CAACG,KAAM,gBAAiBH,UACnEI,EAAiB,SAACL,GAAD,MAAgC,CAACI,KAAM,iBAAkBJ,WAC1EM,EAAmB,SAACJ,GAAD,MAA6B,CAACE,KAAM,sBAAuBF,kBCrB9EK,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASN,EAAcK,EAAKE,SAAS,KAErCD,EAASN,EAAc,wBAE3BM,EAASJ,EAAe,YAGfO,EAA2B,SAACX,EAA4BQ,GACjEA,EAASN,EAAcF,EAAMY,QAAUZ,EAAMY,QAAU,wBACvDJ,EAASJ,EAAe,Y,yyMCb5B,ICiCYS,EAMAC,EDvCNhB,EAAe,CACjBiB,YAAY,GAaHC,EAAkB,SAACC,GAAD,MAC1B,CAACd,KAAM,yBAA0Bc,UEPzBC,EAAY,WAAO,IAAD,QACrBV,EAAWzB,IACXoC,EAAWC,cAEEnC,GAAwB,SAAAoC,GAAK,OAAIA,EAAMC,KAAKP,eACjDI,EAAS,KAEvB,MAAsDI,YAAoB,CACtEC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,KAJbC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAA0BC,EAA3C,EAA+BC,UAAYD,OAa3C,OACI,kBAACE,EAAA,EAAD,CAAOC,IAAK,EAAGC,UAAU,oBACrB,kBAACC,EAAA,EAAD,CAAMC,SAAUP,GAPoB,SAACtB,GFL1B,IAACb,EEMhBc,GFNgBd,EEMC,eAAIa,GFNN,uCAA+B,WAAOC,GAAP,8EAClDA,EAASJ,EAAe,YAD0B,kBAG5BX,EAAcC,GAHc,QAGxC2C,EAHwC,QAItC9B,KAAK+B,aAAexD,EAAkByD,IAC1C/B,EAASQ,GAAgB,IACzBR,EAASJ,EAAe,eAExBE,EAAqB+B,EAAI9B,KAAMC,GARW,gDAY9CG,EAAyB,EAAD,GAAQH,GAZc,yDAA/B,4DEaP,kBAAC2B,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,KACI,sDACI,uBAAGC,KAAK,wCACLC,OAAO,UADV,UAIJ,sEACA,wDACA,8CAEJ,6BACA,kBAACC,EAAA,EAAD,CACIC,UAAU,gBACVC,MAAM,cACNZ,UAAU,QAEd,kBAACC,EAAA,EAAKY,QAAN,eAAc5C,KAAK,QACL6C,YAAY,eACRpB,EAAS,QAAS,CAClBqB,UAAU,EACVC,QAAS,iDAIH,cAAvB,UAAApB,EAAOL,aAAP,eAActB,OACX,uBAAG+B,UAAWiB,IAAEC,cAAeC,KAAK,SAApC,qBACoB,aAAvB,UAAAvB,EAAOL,aAAP,eAActB,OACX,uBAAG+B,UAAWiB,IAAEC,cAAeC,KAAK,SAApC,uBAGR,kBAAClB,EAAA,EAAKK,MAAN,CAAYN,UAAU,OAAOW,UAAU,qBACnC,kBAACD,EAAA,EAAD,CACIC,UAAU,gBACVC,MAAM,iBACNZ,UAAU,QAEd,kBAACC,EAAA,EAAKY,QAAN,eAAc5C,KAAK,WACL6C,YAAY,YACRpB,EAAS,WAAY,CACrBqB,UAAU,EACVK,UAAW,OAIF,cAA1B,UAAAxB,EAAOJ,gBAAP,eAAiBvB,OACd,uBAAG+B,UAAWiB,IAAEC,cAAeC,KAAK,SAApC,wBACuB,eAA1B,UAAAvB,EAAOJ,gBAAP,eAAiBvB,OACd,uBAAG+B,UAAWiB,IAAEC,cAAeC,KAAK,SAApC,sCAER,kBAAClB,EAAA,EAAKK,MAAN,CAAYN,UAAU,OAAOW,UAAU,qBACnC,kBAACV,EAAA,EAAKoB,MAAN,eAAYpD,KAAK,WACL2C,MAAM,eACFlB,EAAS,iBAG7B,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,UAAUtD,KAAK,UAA/B,c,SDtDJU,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,2DEvCC4C,EAAkCC,gBAAK,YAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aACzD,EAAoCC,oBAAkB,GAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAiB,IAAzC,mBAAOG,EAAP,KAAaC,EAAb,KAMMC,EAAc,WAChBH,GAAc,GACdI,KAEEA,EAAa,WACF,KAATH,IACAJ,EAAaI,GACbD,GAAc,KAYtB,OACI,oCAEQD,EACI,kBAAC5B,EAAA,EAAKY,QAAN,CAAc5C,KAAK,OACLkE,KAAK,KACLC,GAAG,QACHC,MAAO,CAACC,MAAO,QACfvD,MAAOgD,EACPQ,SAZN,SAACC,GACrBR,EAAQQ,EAAMC,cAAc1D,QAYF2D,OAAQT,EACRU,WApBJ,SAACH,GACL,UAAdA,EAAMI,MACNV,IACAD,MAkBsBY,WAAS,IAGrB,0BAAMC,cAtCL,WACfd,EAAQN,GACRI,GAAc,KAoCA,IAAmCJ,EAAnC,S,kDCrCTqB,EAAc,WAEnB,OAAO9F,EAASS,IAAoB,eAF/BqF,EAAc,SAIRrB,GACX,OAAOzE,EAASQ,KAA6E,aAAc,CAACiE,WALvGqB,EAAc,SAORC,GACX,OAAO/F,EAASU,OAAT,qBAA4CqF,KAR9CD,EAAc,SAUHC,EAAoBtB,GACpC,OAAOzE,EAASgG,IAAT,qBAA2ED,GAAc,CAACtB,WAX5FqB,GAAc,SAadC,GACL,OAAO/F,EAASS,IAAT,qBAAiDsF,EAAjD,YAdFD,GAAc,SAgBZC,EAAoBtB,GAC3B,OAAOzE,EAASQ,KAAT,qBAA8DuF,EAA9D,UAAkF,CAACtB,WAjBrFqB,GAAc,SAmBZC,EAAoBE,GAC3B,OAAOjG,EAASU,OAAT,sBAA6CqF,EAA7C,kBAAiEE,KApBnEH,GAAc,SAsBZC,EAAoBE,EAAgBC,GAC3C,OAAOlG,EAASgG,IAAT,sBAA6FD,EAA7F,kBAAiHE,GAAUC,ICVpIC,GAAyB,GA2ElBC,GAAe,SAACL,EAAoBE,EAAgBI,GAArC,OACxB,SAAChF,EAA6BiF,GAC1B,IAAMJ,EAAOI,IAAWC,MAAMR,GAAYS,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOT,KACnE,GAAIC,EAAJ,CACI,IAAMS,EAAqB,aACvBlC,MAAOyB,EAAKzB,MACZmC,YAAaV,EAAKU,YAClBhG,OAAQsF,EAAKtF,OACbiG,SAAUX,EAAKW,SACfC,UAAWZ,EAAKY,UAChBC,SAAUb,EAAKa,UACZV,GAEPP,GAAuBC,EAAYE,EAAQU,GACtCK,MAAK,SAAC9D,GACyB,IAAxBA,EAAI9B,KAAK+B,YAET9B,EAzCI,SAAC6E,GACzB,MAAO,CAAClF,KAAM,cAAekF,QAwCAe,CAAa/D,EAAI9B,KAAKA,KAAK8F,eAGhDC,QAAQC,KAAK,oCCnGZC,GAA0C,SAAC,GAA2B,IAA1BnB,EAAyB,EAAzBA,KAAMoB,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAG3DlG,EAAWzB,IACjB,EAA0CwC,YAAuB,CAC7DC,cAAe,CACXuE,YAAaV,EAAKU,YAClBhG,OAAQsF,EAAKtF,OACbiG,SAAUX,EAAKW,SACfC,UAAWZ,EAAKY,UAChBC,SAAUb,EAAKa,YANhBtE,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAAjB,EAA+B8E,QAgB/B,OACI,kBAACC,EAAA,EAAD,CACIH,KAAMA,EACNpC,KAAK,KACLwC,kBAAgB,gCAChBC,UAAQ,GAGR,kBAAC3E,EAAA,EAAD,CAAMC,SAAUP,GAduB,SAACtB,GAC5CC,EAAS+E,GAAaF,EAAK0B,WAAY1B,EAAKQ,GAAvB,eAA+BtF,KACpDmG,QAaQ,kBAACE,EAAA,EAAMI,OAAP,KACI,kBAACJ,EAAA,EAAMK,MAAP,CAAapB,GAAG,iCAAhB,gBACkBR,EAAKzB,QAG3B,kBAACgD,EAAA,EAAMM,KAAP,KAGI,kBAAC/E,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,oBACA,kBAACN,EAAA,EAAKY,QAAN,eACIC,YAAY,qBACRpB,EAAS,kBAKrB,kBAACO,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,eACA,kBAACN,EAAA,EAAKgF,OAAWvF,EAAS,UACtB,4BAAQX,MAAOJ,EAAauG,KAA5B,OACA,4BAAQnG,MAAOJ,EAAawG,YAA5B,eACA,4BAAQpG,MAAOJ,EAAayG,WAA5B,aACA,4BAAQrG,MAAOJ,EAAa0G,OAA5B,WAKR,kBAACpF,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,iBACA,kBAACN,EAAA,EAAKgF,OAAWvF,EAAS,YACtB,4BAAQX,MAAOH,EAAe0G,KAA9B,OACA,4BAAQvG,MAAOH,EAAe2G,QAA9B,UACA,4BAAQxG,MAAOH,EAAe4G,IAA9B,MACA,4BAAQzG,MAAOH,EAAe6G,OAA9B,SACA,4BAAQ1G,MAAOH,EAAe8G,UAA9B,cAKR,kBAACzF,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,mBACA,kBAACN,EAAA,EAAKY,QAAN,eAAc5C,KAAK,QAAWyB,EAAS,gBAI3C,kBAACO,EAAA,EAAKK,MAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,iBACA,kBAACN,EAAA,EAAKY,QAAN,eAAc5C,KAAK,QAAWyB,EAAS,gBAG/C,kBAACgF,EAAA,EAAMiB,OAAP,KACI,kBAACrE,EAAA,EAAD,CAAQC,QAAQ,UAAUtD,KAAK,UAA/B,UACA,kBAACqD,EAAA,EAAD,CAAQC,QAAQ,YAAYqE,QAASpB,GAArC,cClGPqB,GAAe,SAAC1C,GACzB,IAAM7E,EAAWzB,IAQXiJ,EAAcC,mBAAQ,WACxB,OAAQ5C,EAAKtF,QACT,KAAKc,EAAayG,UACd,MAAO,UACX,KAAKzG,EAAauG,IACd,MAAO,UACX,KAAKvG,EAAawG,WACd,MAAO,UACX,KAAKxG,EAAa0G,MACd,MAAO,UACX,QACI,MAAO,aAEhB,CAAClC,IACE6C,EAAmBD,mBAAQ,WAC7B,OAAQ5C,EAAKtF,QACT,KAAKc,EAAayG,UACd,MAAO,UACX,KAAKzG,EAAauG,IACd,MAAO,UACX,KAAKvG,EAAawG,WACd,MAAO,UACX,KAAKxG,EAAa0G,MACd,MAAO,SACX,QACI,MAAO,eAEhB,CAAClC,IAiBJ,MAAO,CAAC8C,WAnDW,WFsFK,IAACjD,EAAoBE,EErFzC5E,GFqFqB0E,EErFCG,EAAK0B,WFqFc3B,EErFFC,EAAKQ,GFqFgB,SAACrF,GACjEyE,GAAuBC,EAAYE,GAC9Be,MAAK,SAAC9D,GACyB,IAAxBA,EAAI9B,KAAK+B,YACT9B,EA9BY,SAAC4E,EAAgBF,GACzC,MAAO,CAAC/E,KAAM,cAAeiF,SAAQF,cA6BhBkD,CAAahD,EAAQF,WEvCtBmD,gBAhDI,SAACzE,GACrBpD,EAAS+E,GAAaF,EAAK0B,WAAY1B,EAAKQ,GAAI,CAACjC,YA+ChBoE,cAAaM,eAf3BL,mBAAQ,WAC3B,OAAQ5C,EAAKtF,QACT,KAAKc,EAAayG,UACd,MAAO,YACX,KAAKzG,EAAauG,IACd,MAAO,MACX,KAAKvG,EAAawG,WACd,MAAO,iBACX,KAAKxG,EAAa0G,MACd,MAAO,QACX,QACI,MAAO,MAEhB,CAAClC,IAE8D6C,qBC1CzDK,GAA0B,SAAC,GAEO,IADHlD,EACE,EADFA,KAGxC,EClB2B,WAC3B,MAAwBvB,oBAAkB,GAA1C,mBAAO2C,EAAP,KAAa+B,EAAb,KAIA,MAAO,CAAC/B,OAAMC,QAHE+B,uBAAY,kBAAMD,GAAQ,KAAQ,IAG3BE,OAFR,kBAAMF,GAAQ,KDeGG,GAAzBlC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAASgC,EAAtB,EAAsBA,OACtB,EAAqFX,GAAa1C,GAA3F8C,EAAP,EAAOA,WAAYE,EAAnB,EAAmBA,gBAAiBL,EAApC,EAAoCA,YAAaM,EAAjD,EAAiDA,eAAgBJ,EAAjE,EAAiEA,iBAEjE,OACI,oCACI,kBAACU,EAAA,EAAD,CAAMrE,MAAO,CAACsE,OAAQ,QAASC,WAAYd,IACvC,kBAACY,EAAA,EAAK1B,KAAN,KACI,yBAAK3C,MAAO,CAACwE,eAAgB,WAAYC,QAAS,SAC9C,kBAACC,EAAA,EAAD,CAAOC,GAAIhB,GAAmBI,IAGlC,kBAACM,EAAA,EAAK3B,MAAN,KACI,kBAACvD,EAAD,CAAUE,MAAOyB,EAAKzB,MAAOC,aAAcwE,KAE/C,kBAACO,EAAA,EAAKO,SAAN,CAAejH,UAAU,mBACrB,0BAAMA,UAAWiB,IAAEiG,WAAnB,WAEKC,IAAMhE,EAAK+D,WAAWE,OAAO,2BAGtC,kBAACV,EAAA,EAAKW,KAAN,qBACkBlE,EAAKU,YAAcV,EAAKU,YAAc,QAExD,kBAACyD,EAAA,iBAAD,CAAkB1B,QAASK,EAAYjG,UAAWiB,IAAEsG,eACpD,kBAACC,EAAA,WAAD,CAAYxH,UAAWiB,IAAEsG,aAAc3B,QAASY,MAGxD,kBAAC,GAAD,CAAcrD,KAAMA,EAAMoB,KAAMA,EAAMC,QAASA,M,oBE9BrDiD,GAAgC,GA+CzBC,GAAiB,kBAAM,SAACpJ,GACjCA,EAASJ,EAAe,YACxB6E,IACKkB,MAAK,SAAC9D,GACH7B,EAXD,CAACL,KAAM,gBAAiB0J,UAWCxH,EAAI9B,OAC5BC,EAASJ,EAAe,iBAE3B0J,OAAM,SAACC,GACJpJ,EAAyBoJ,EAAGvJ,QCpD3BwJ,GAA4BrG,gBAAK,YAIQ,IAHHb,EAGE,EAHFA,MACAmH,EAEE,EAFFA,WACAC,EACE,EADFA,QAE/C,EAA0BpG,mBAAiB,IAA3C,mBAAO7C,EAAP,KAAckJ,EAAd,KACA,EAA8BrG,mBAAiB,IAA/C,mBAAOsG,EAAP,KAAgBC,EAAhB,KAEMC,EAAiB,WACE,KAAjBrJ,EAAMsJ,QACNL,EAAQjJ,EAAMsJ,QACdJ,EAAS,KAETE,EAAW,oBAenB,OACI,oCACI,kBAAClI,EAAA,EAAKY,QAAN,CAAc5C,KAAK,OACLkE,KAAK,KACLC,GAAG,QACHrD,MAAOA,EACP+B,YAAaF,EACb2B,SAlBE,SAACC,GACrByF,EAASzF,EAAMC,cAAc1D,QAkBX2D,OAAQ,kBAAMyF,EAAW,KACzBxF,WAjBI,SAACH,GACvB2F,EAAW,IACO,UAAd3F,EAAMI,MACNwF,IACAH,EAAS,QAgBLC,GACG,kBAACjI,EAAA,EAAKoH,KAAN,CAAWiB,OAAK,GACdJ,GAILH,GACG,kBAACzG,EAAA,EAAD,CAAQC,QAAQ,UACRY,KAAK,KACLyD,QAASwC,GAFjB,WCnDNG,GAA6B9G,gBAAK,YAGQ,IAFH+G,EAEE,EAFFA,SACAC,EACE,EADFA,qBAE1CnK,EAAWzB,IACjB6L,qBAAU,WP4DY,IAAC1F,EO3DnB1E,GP2DmB0E,EO3DCwF,EAAS7E,GP2Da,SAACrF,GAC/CyE,GAAqBC,GAChBiB,MAAK,SAAC9D,GACH7B,EAXc,SAAC0E,EAAoBQ,GAC3C,MAAO,CAACvF,KAAM,YAAa+E,aAAYQ,SAUtBmF,CAAW3F,EAAY7C,EAAI9B,KAAKuK,gBO7D9C,CAACJ,EAAS7E,GAAIrF,IAEjB,IAAIkF,EAAQzG,GAA2B,SAAAoC,GAAK,OAAIA,EAAMqE,MAAMgF,EAAS7E,OAC7C,WAApB6E,EAASK,SACTrF,EAAQA,EAAMqF,QAAO,SAAAC,GAAC,OAAIA,EAAEjL,SAAWc,EAAauG,QAEhC,cAApBsD,EAASK,SACTrF,EAAQA,EAAMqF,QAAO,SAAAC,GAAC,OAAIA,EAAEjL,SAAWc,EAAayG,cAExD,IAGM2D,EAAsBxC,uBAAY,SAAC7E,GACrCpD,EFwD6B,SAAC0E,EAAoBtB,GAArB,OAAuC,SAACpD,GACzEyE,EAAgCC,EAAYtB,GACvCuC,MAAK,SAAC9D,GACH7B,EA7CyB,SAAC0E,EAAoBtB,GACtD,MAAO,CAACzD,KAAM,wBAAyB0F,GAAIX,EAAYtB,SA4CtCsH,CAAsBhG,EAAYtB,QE3DtCuH,CAAsBT,EAAS7E,GAAIjC,MAC7C,CAACpD,EAAUkK,EAAS7E,KACjBuF,EAAU3C,uBAAY,SAAC7E,GACzBpD,EPgDiB,SAAC0E,EAAoBtB,GAArB,OAAuC,SAACpD,GAC7DyE,GAAuBC,EAAYtB,GAC9BuC,MAAK,SAAC9D,GACH7B,EAnBD,CAACL,KAAM,WAAYkF,KAmBChD,EAAI9B,KAAKA,KAAK8F,WOnD5BgF,CAAUX,EAAS7E,GAAIjC,MACjC,CAACpD,EAAUkK,EAAS7E,KAEjByF,EAAoB7C,uBAAY,kBAAMkC,EAAqBD,EAAS7E,GAAI,SAAQ,CAAC6E,EAAS7E,GAAI8E,IAC9FY,EAAuB9C,uBAAY,kBAAMkC,EAAqBD,EAAS7E,GAAI,YAAW,CAAC6E,EAAS7E,GAAI8E,IACpGa,EAA0B/C,uBAAY,kBAAMkC,EAAqBD,EAAS7E,GAAI,eAAc,CAAC6E,EAAS7E,GAAI8E,IAEhH,OACI,yBAAKzI,UAAWiB,KAAEsI,WACd,kBAAC7C,EAAA,EAAD,CAAMrE,MAAO,CAACC,MAAO,SACjB,kBAACoE,EAAA,EAAK5B,OAAN,CAAazC,MAAO,CAACmH,UAAW,UAC5B,kBAAClC,EAAA,iBAAD,CAAkB1B,QAlBX,WF2CM,IAAC5C,EE1C1B1E,GF0C0B0E,EE1CCwF,EAAS7E,GF0Ca,SAACrF,GACtDA,EAASJ,EAAe,YACxBI,EAlBoF,CACpFL,KAAM,gCAAiC0F,GAiBDX,EAjBKnF,OAiBO,YAClDkF,EAA2BC,GACtBiB,MAAK,SAAC9D,GACH7B,EAjCoB,SAAC0E,GAC7B,MAAO,CAAC/E,KAAM,kBAAmB0F,GAAIX,GAgCpByG,CAAiBzG,IAC1B1E,EAASJ,EAAe,qBE/B2B8B,UAAWiB,KAAEsG,eACxD,kBAACb,EAAA,EAAK3B,MAAN,CAAY1C,MAAO,CAACmH,UAAW,SAC3B,kBAAChI,EAAD,CAAUE,MAAO8G,EAAS9G,MAAOC,aAAcoH,MAGvD,kBAACjB,GAAD,CAAOlH,MAAM,WAAWoH,QAASkB,EAASnB,YAAY,IACtD,kBAACrB,EAAA,EAAK1B,KAAN,KAEQxB,EAAMkG,KAAI,SAAAhG,GAAI,OAAI,kBAAC,GAAD,CAAMP,KAAMO,EACNd,IAAKc,EAAKC,SAK1C,kBAAC+C,EAAA,EAAKf,OAAN,CAAa3F,UAAWiB,KAAE0I,YACtB,kBAACrI,EAAA,EAAD,CAAQC,QAAQ,kBACRY,KAAK,KACLyD,QAASwD,GAFjB,OAKA,kBAAC9H,EAAA,EAAD,CAAQC,QAAQ,kBACRY,KAAK,KACLyD,QAASyD,GAFjB,UAKA,kBAAC/H,EAAA,EAAD,CAAQC,QAAQ,kBACRY,KAAK,KACLyD,QAAS0D,GAFjB,mBCpEPM,GAAe,WACxB,IAAMtL,EAAWzB,IACXoC,EAAWC,cACXyI,EAAY5K,GAAe,SAAAoC,GAAK,OAAIA,EAAMwI,aAE1C9I,EAAa9B,GAAwB,SAAAoC,GAAK,OAAIA,EAAMC,KAAKP,cAqB/D,OApBCA,GAAcI,EAAS,UAExByJ,qBAAU,WACF7J,GACAP,EAASoJ,QAEd,CAACpJ,EAAUO,IAEd6J,qBAAU,WACNpK,EAASoJ,QACV,CAACpJ,IAUG,CAACqJ,YAAWkC,YARCtD,uBAAY,SAAC7E,GAC7BpD,EH0DqB,SAACoD,GAAD,OAAmB,SAACpD,GAC7CA,EAASJ,EAAe,YACxB6E,EAA2BrB,GACtBuC,MAAK,SAAC9D,GACH7B,EA3CD,CAACL,KAAM,eAAgBuK,SA2CCrI,EAAI9B,KAAKA,KAAK8F,OACrC7F,EAASJ,EAAe,kBG/DnB4L,CAAcpI,MACxB,CAACpD,IAM4BmK,qBAJHlC,uBAAY,SAACvD,EAAoB6F,GAC1DvK,EHuB8B,SAAC0E,EAAoB6F,GACvD,MAAO,CAAC5K,KAAM,yBAA0B0F,GAAIX,EAAY6F,UGxB3CkB,CAAuB/G,EAAY6F,MAC7C,CAACvK,MCzBK0L,GAAmB,WAC5B,MAAuDJ,KAAhDjC,EAAP,EAAOA,UAAWkC,EAAlB,EAAkBA,YAAapB,EAA/B,EAA+BA,qBAE/B,OACI,6BACI,4BAAQzI,UAAU,aACd,kBAAC8H,GAAD,CAAOlH,MAAM,eAAeoH,QAAS6B,KAEzC,yBAAK7J,UAAU,OAGP2H,EAAU+B,KAAI,SAAAhG,GAAI,OAAI,kBAAC6E,GAAD,CAAUC,SAAU9E,EACV+E,qBAAsBA,EACtB7F,IAAKc,EAAKC,WCdjDsG,GAAe,WACxB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,kBAAC,GAAD,QACzB,kBAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,kBAAC,EAAD,QAC7B,kBAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,kBAAC,IAAD,CAAUC,GAAG,WACtC,kBAAC,IAAD,CAAOF,KAAK,OAAOC,QAAS,uD,wCCN3BE,GAAa,WACtB,IAAMxL,EAAa9B,GAAwB,SAAAoC,GAAK,OAAIA,EAAMC,KAAKP,cACzDP,EAAWzB,IAIjB,OACI,kBAACyN,GAAA,EAAD,CAAQtD,GAAG,OAAOzF,QAAQ,OAAOgJ,OAAO,MACpC,kBAACC,GAAA,EAAD,KACI,kBAACF,GAAA,EAAOG,MAAR,CAAcjK,KAAK,KAAnB,gBACC3B,GAAc,kBAACyC,EAAA,EAAD,CAAQsE,QAPb,WAClBtH,GhBgDsB,SAACA,GAC3BA,EAASJ,EAAe,YACxBX,IACK0G,MAAK,SAAA9D,GACEA,EAAI9B,KAAK+B,aAAexD,EAAkByD,IAC1C/B,EAASQ,GAAgB,IACzBR,EAASJ,EAAe,eAExBE,EAAqB+B,EAAI9B,KAAMC,MAGtCsJ,OAAM,SAAC9J,GACJW,EAAyBX,EAAOQ,WgBtDb,eCoBhBoM,OAzBf,WACI,IAAM7M,EAASd,GAAkC,SAACoC,GAAD,OAAWA,EAAMwL,IAAI9M,UAChEE,EAAgBhB,GAAwB,SAACoC,GAAD,OAAWA,EAAMwL,IAAI5M,iBAC7DO,EAAWzB,IAMjB,OAJA6L,qBAAU,WACNpK,GjByBkB,SAACA,GACvBA,EAASJ,EAAe,YACxBI,EAASH,GAAiB,IAC1BZ,IACK0G,MAAK,SAAC9D,GACCA,EAAI9B,KAAK+B,aAAexD,EAAkByD,IAC1C/B,EAASQ,GAAgB,IACzBR,EAASJ,EAAe,eAExBE,EAAqB+B,EAAI9B,KAAMC,MAGtCsJ,OAAM,SAAA9J,GAAK,OAAIW,EAAyBX,EAAOQ,MAC/CsM,SAAQ,kBAAMtM,EAASH,GAAiB,YiBrC1C,CAACG,IAECP,EAQD,6BACI,kBAAC,GAAD,MACY,YAAXF,GAAwB,kBAACgN,GAAA,EAAD,CAAaC,UAAQ,EAACC,IAAK,MACpD,kBAAC,GAAD,OAVG,yBACH1I,MAAO,CAAC2I,SAAU,QAASC,IAAK,MAAOzB,UAAW,SAAUlH,MAAO,SACnE,kBAAC4I,GAAA,EAAD,CAASC,UAAU,SAAS5J,QAAQ,c,2BCf1C6J,GAAcC,aAAgB,CAChC1D,URW4B,WAAiE,IAAhExI,EAA+D,uDAAvDsI,GAAY6D,EAA2C,uCAC5F,OAAQA,EAAOrN,MACX,IAAK,eACD,MAAM,CAAN,2BAAYqN,EAAO9C,UAAnB,IAA6BK,OAAQ,MAAO0C,aAAc,UAA1D,mBAAsEpM,IAC1E,IAAK,kBACD,OAAOA,EAAM0J,QAAO,SAAAnF,GAAI,OAAIA,EAAKC,KAAO2H,EAAO3H,MACnD,IAAK,wBACD,OAAOxE,EAAMuK,KAAI,SAAAhG,GAAI,OAAIA,EAAKC,KAAO2H,EAAO3H,GAAnB,2BACfD,GADe,IACThC,MAAO4J,EAAO5J,QACxBgC,KAEV,IAAK,yBACD,OAAOvE,EAAMuK,KAAI,SAAAhG,GAAI,OAAIA,EAAKC,KAAO2H,EAAO3H,GAAnB,2BACfD,GADe,IACTmF,OAAQyC,EAAOzC,SACzBnF,KAEV,IAAK,gCACD,OAAOvE,EAAMuK,KAAI,SAAA8B,GAAE,OAAIA,EAAG7H,KAAO2H,EAAO3H,GAAjB,2BAA0B6H,GAA1B,IAA8BD,aAAcD,EAAOzN,SAAU2N,KACxF,IAAK,gBACD,OAAOF,EAAO3D,UAAU+B,KAAI,SAAAhG,GAAI,kCAASA,GAAT,IAAemF,OAAQ,MAAO0C,aAAc,YAChF,QACI,OAAOpM,IQ/BfqE,MbkBwB,WAAsD,IAArDrE,EAAoD,uDAA5CiE,GAAWkI,EAAiC,uCAC7E,OAAQA,EAAOrN,MACX,IAAK,cACD,OAAO,2BAAIkB,GAAX,kBAAmBmM,EAAOtI,WAAa7D,EAAMmM,EAAOtI,YAAY6F,QAAO,SAAAC,GAAC,OAAIA,EAAEnF,KAAO2H,EAAOpI,YAChG,IAAK,WACD,OAAO,2BACA/D,GADP,kBAEKmM,EAAOnI,KAAK0B,WAFjB,CAE+ByG,EAAOnI,MAFtC,mBAE+ChE,EAAMmM,EAAOnI,KAAK0B,gBAErE,IAAK,eACD,OAAO,2BAAI1F,GAAX,kBAAmBmM,EAAO9C,SAAS7E,GAAK,KAC5C,IAAK,kBACD,IAAI8H,EAAS,eAAOtM,GAEpB,cADOsM,EAAUH,EAAO3H,IACjB8H,EAEX,IAAK,gBACD,IAAMA,EAAS,eAAOtM,GAItB,OAHAmM,EAAO3D,UAAU+D,SAAQ,SAAChI,GACtB+H,EAAU/H,EAAKC,IAAM,MAElB8H,EAEX,IAAK,YACD,OAAO,2BAAItM,GAAX,kBAAmBmM,EAAOtI,WAAasI,EAAO9H,QAElD,IAAK,cACD,OAAO,2BACArE,GADP,kBAEKmM,EAAOnI,KAAK0B,WAAa1F,EAAMmM,EAAOnI,KAAK0B,YAAY6E,KAAI,SAAAhG,GAAI,OAAIA,EAAKC,KAAO2H,EAAOnI,KAAKQ,GAAxB,eAC1D2H,EAAOnI,MACXO,OAGd,QACI,OAAOvE,IapDfwL,IpBFsB,WAA8E,IAA7ExL,EAA4E,uDAAlDvB,EAAc0N,EAAoC,uCACnG,OAAQA,EAAOrN,MACX,IAAK,iBACD,OAAO,2BAAIkB,GAAX,IAAkBtB,OAAQyN,EAAOzN,SACrC,IAAK,gBACD,OAAO,2BAAIsB,GAAX,IAAkBrB,MAAOwN,EAAOxN,QACpC,IAAK,sBACD,OAAO,2BAAIqB,GAAX,IAAkBpB,cAAeuN,EAAOvN,gBAC5C,QACI,OAAO,eAAIoB,KoBNnBC,KlBCuB,WAA+E,IAA9ED,EAA6E,uDAAnDvB,EAAc0N,EAAqC,uCACrG,OAAQA,EAAOrN,MACX,IAAK,yBACD,OAAO,2BAAIkB,GAAX,IAAkBN,WAAYyM,EAAOvM,QACzC,QACI,OAAOI,MkBHNwM,GAAQC,aAAmBR,GAAaS,aAAgBC,O,SCNrEC,IAASC,OACL,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAUL,MAAOA,IACb,kBAAC,GAAD,QAGRM,SAASC,eAAe,U,mBCb5BC,EAAOC,QAAU,CAAC,cAAgB,+B,mBCAlCD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,aAAe,2BAA2B,UAAY,0B,mBCA5GD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,aAAe,+BAA+B,WAAa,+B","file":"static/js/main.46e1ea38.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"a3689f8d-4bdb-4cdd-9a1a-83733437adfc\"\n    }\n})\n\nexport enum ResponseResulCode {\n    OK = 0,\n    Error = 1,\n    Captcha = 10\n}\nexport type ResponseType<D = {}> = {\n    data: D\n    fieldsErrors: string[]\n    messages: string[]\n    resultCode: number\n}","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {ActionsAppType} from \"../types/types\";\nimport {AppRootStateType} from \"../../bll/store\";\n\nexport const useAppDispatch: () => ThunkDispatch<AppRootStateType, any, ActionsAppType> = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> =  useSelector","import {LoginPayloadType} from \"../common/types/types\";\nimport {instance, ResponseType} from \"../common/constants/instanceAPI\";\n\ntype AuthMeResponseType = {\n    id: number\n    login: string\n    email: string\n}\nexport const authAPI = {\n    login(payload: LoginPayloadType ){\n        return instance.post<ResponseType<{userId: string}>>('/auth/login', payload)\n    },\n    me(){\n        return instance.get('auth/me')\n    },\n    logout(){\n        return instance.delete('/auth/login')\n    }\n}","import {RequestStatusType} from \"../../common/types/types\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppAT): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case \"APP/SET-INITIALIZED\":\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return {...state}\n    }\n}\n\n\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    isInitialized: boolean\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\nexport type AppAT =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | ReturnType<typeof setInitializedAC>","import {\n    setAppErrorAC,\n    SetAppErrorActionType,\n    setAppStatusAC,\n    SetAppStatusActionType\n} from \"../../bll/reducers/appReducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../constants/instanceAPI\";\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC('failed'))\n}","import {LoginPayloadType} from \"../../common/types/types\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../../api/authAPI\";\nimport {ResponseResulCode} from \"../../common/constants/instanceAPI\";\nimport {AppAT, setAppStatusAC, setInitializedAC} from \"./appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../common/utils/errorUtils\";\n\nconst initialState = {\n    isLoggedIn: false,\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthAT): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (payload: LoginPayloadType) => async (dispatch: Dispatch<AuthAT>) => {\n    dispatch(setAppStatusAC('loading'))\n    try {\n        const res = await authAPI.login(payload)\n        if (res.data.resultCode === ResponseResulCode.OK) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (error) {\n        //@ts-ignore\n        handleServerNetworkError(error, dispatch)\n    }\n}\n\nexport const meTC = () => (dispatch: Dispatch<AuthAT>) => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(setInitializedAC(false))\n    authAPI.me()\n        .then((res) => {\n            if (res.data.resultCode === ResponseResulCode.OK) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n        .finally(() => dispatch(setInitializedAC(true)))\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<AuthAT>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === ResponseResulCode.OK) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// types\nexport type AuthAT = ReturnType<typeof setIsLoggedInAC> | AppAT","import {TodolistsAT} from \"../../bll/reducers/todolistsReducer\";\nimport {TasksAT} from \"../../bll/reducers/tasksReducer\";\nimport {AppAT} from \"../../bll/reducers/appReducer\";\nimport {AuthAT} from \"../../bll/reducers/authReducer\";\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type TodolistAppType = TodolistType & {\n    filter : FilterType\n    entityStatus: RequestStatusType\n}\n\nexport type TaskType = {\n    id: string\n    todoListId: string\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\nexport type TaskAppType = {\n    [key: string] : TaskType[]\n}\n\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type FilterType = \"all\" | \"active\" | \"completed\"\nexport type ActionsAppType = TodolistsAT | TasksAT | AuthAT | AppAT\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type LoginPayloadType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}","import React, {FC} from \"react\";\nimport {Button, FloatingLabel, Form, Stack} from \"react-bootstrap\";\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\nimport {useNavigate} from \"react-router-dom\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\nimport s from \"./Login.module.css\"\nimport {loginTC} from \"../../bll/reducers/authReducer\";\n\n\ninterface ILoginForm {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const Login: FC = () => {\n    const dispatch = useAppDispatch()\n    const navigate = useNavigate()\n\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    isLoggedIn && navigate('/')\n\n    const {register, handleSubmit, formState: {errors}} = useForm<ILoginForm>({\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false\n        },\n\n    });\n    const onSubmit: SubmitHandler<ILoginForm> = (data) => {\n        dispatch(loginTC({...data}))\n    }\n\n\n    return (\n        <Stack gap={3} className=\"col-md-3 mx-auto\">\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Form.Group>\n                    <Form.Label >\n                        <p>To log in get registered\n                            <a href=\"https://social-network.samuraijs.com/\"\n                               target=\"_blank\"> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </Form.Label>\n                    <hr/>\n                    <FloatingLabel\n                        controlId=\"floatingInput\"\n                        label=\"Enter email\"\n                        className=\"mb-3\"\n                    >\n                    <Form.Control type=\"email\"\n                                  placeholder=\"Enter email\"\n                                  {...register(\"email\", {\n                                      required: true,\n                                      pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n                                  })}\n                    />\n                    </FloatingLabel>\n                    {errors.email?.type === 'required' &&\n                        <p className={s.error_message} role=\"alert\">Email is required</p>}\n                    {errors.email?.type === 'pattern' &&\n                        <p className={s.error_message} role=\"alert\">Email is not valid</p>}\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                    <FloatingLabel\n                        controlId=\"floatingInput\"\n                        label=\"Enter password\"\n                        className=\"mb-3\"\n                    >\n                    <Form.Control type=\"password\"\n                                  placeholder=\"Password\"\n                                  {...register(\"password\", {\n                                      required: true,\n                                      minLength: 3\n                                  })}\n                    />\n                    </FloatingLabel>\n                    {errors.password?.type === 'required' &&\n                        <p className={s.error_message} role=\"alert\">Password is required</p>}\n                    {errors.password?.type === 'minLength' &&\n                        <p className={s.error_message} role=\"alert\">Password should be more 3 symbols</p>}\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                    <Form.Check type=\"checkbox\"\n                                label=\"Remember me\"\n                                {...register(\"rememberMe\")}\n                    />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </Stack>\n    )\n}","import React, {FC, useState, KeyboardEvent, ChangeEvent, memo} from \"react\";\nimport { Form } from \"react-bootstrap\";\n\ntype EditSpanPropsType = {\n    title: string\n    onChangeText: (title: string) => void\n}\nexport const EditSpan: FC<EditSpanPropsType> = memo(({title, onChangeText}) => {\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\n    const [text, setText] = useState<string>(\"\")\n\n    const onEditMode = (): void => {\n        setText(title)\n        setIsEditMode(true)\n    }\n    const offEditMode = (): void => {\n        setIsEditMode(false)\n        changeText()\n    }\n    const changeText = (): void => {\n        if (text !== \"\") {\n            onChangeText(text)\n            setIsEditMode(false)\n        }\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        if (event.key === \"Enter\") {\n            changeText()\n            offEditMode()\n        }\n    }\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setText(event.currentTarget.value)\n    }\n    return (\n        <>\n            {\n                isEditMode ?\n                    <Form.Control type=\"text\"\n                                  size=\"sm\"\n                                  as=\"input\"\n                                  style={{width: \"100%\"}}\n                                  value={text}\n                                  onChange={onChangeHandler}\n                                  onBlur={offEditMode}\n                                  onKeyPress={onKeyPressHandler}\n                                  autoFocus\n                    />\n\n                    : <span onDoubleClick={onEditMode}> {title} </span>\n            }\n        </>\n    )\n})","import {TaskType, TodolistType, UpdateTaskType} from \"../common/types/types\";\nimport {instance, ResponseType} from \"../common/constants/instanceAPI\";\nimport {AxiosResponse} from \"axios\";\n\n\ntype GetTasksResponseType = {\n    items: TaskType[]\n    totalCount: number\n    error: string | null\n}\n\n\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>(\"todo-lists\")\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>(\"todo-lists\", {title})\n    },\n    deleteTodolist(todolistID: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}`)\n    },\n    updateTodolistTitle(todolistID: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistID}`, {title})\n    },\n    getTasks(todolistID: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`)\n    },\n    createTask(todolistID: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title})\n    },\n    deleteTask(todolistID: string, taskID: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistID}/tasks/${taskID}`)\n    },\n    updateTask(todolistID: string, taskID: string, task: UpdateTaskType) {\n        return instance.put<UpdateTaskType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistID}/tasks/${taskID}`, task)\n    }\n}","import {TaskAppType, TaskPriorities, TaskStatuses, TaskType, UpdateTaskType} from \"../../common/types/types\";\nimport {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from \"./todolistsReducer\";\nimport {todolistAPI} from \"../../api/todolistAPI\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../store\";\n\nexport type UpdateTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksAT = RemoveTaskAT | AddTaskAT\n    | AddTodolistAT | RemoveTodolistAT\n    | SetTodolistsAT | SetTasksAT | UpdateTaskAT\n\n//action types\ntype RemoveTaskAT = ReturnType<typeof removeTaskAC>\ntype AddTaskAT = ReturnType<typeof addTaskAC>\ntype SetTasksAT = ReturnType<typeof setTasksAC>\ntype UpdateTaskAT = ReturnType<typeof updateTaskAC>\n\n\nconst initState: TaskAppType = {}\n\nexport const tasksReducer = (state = initState, action: TasksAT): TaskAppType => {\n    switch (action.type) {\n        case \"REMOVE_TASK\":\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)}\n        case \"ADD_TASK\":\n            return {\n                ...state,\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\n            }\n        case \"ADD_TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE_TODOLIST\": {\n            let stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        case \"SET_TODOLISTS\": {\n            const stateCopy = {...state}\n            action.todolists.forEach((elem) => {\n                stateCopy[elem.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET_TASKS\": {\n            return {...state, [action.todolistID]: action.tasks}\n        }\n        case \"UPDATE_TASK\": {\n            return {\n                ...state,\n                [action.task.todoListId]: state[action.task.todoListId].map(elem => elem.id === action.task.id\n                    ? {...action.task}\n                    : elem)\n            }\n        }\n        default:\n            return state\n    }\n}\n\n//action creators\nexport const removeTaskAC = (taskID: string, todolistID: string) => {\n    return {type: \"REMOVE_TASK\", taskID, todolistID} as const\n}\nexport const addTaskAC = (task: TaskType) => {\n    return {type: \"ADD_TASK\", task} as const\n}\nexport const setTasksAC = (todolistID: string, tasks: TaskType[]) => {\n    return {type: \"SET_TASKS\", todolistID, tasks} as const\n}\nexport const updateTaskAC = (task: TaskType) => {\n    return {type: \"UPDATE_TASK\", task} as const\n}\n\n//thunk creators\nexport const setTasksTC = (todolistID: string) => (dispatch: Dispatch<TasksAT>) => {\n    todolistAPI.getTasks(todolistID)\n        .then((res) => {\n            dispatch(setTasksAC(todolistID, res.data.items))\n        })\n}\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: Dispatch<TasksAT>) => {\n    todolistAPI.createTask(todolistID, title)\n        .then((res) => {\n            dispatch(addTaskAC(res.data.data.item))\n        })\n}\nexport const deleteTaskTC = (todolistID: string, taskID: string) => (dispatch: Dispatch<TasksAT>) => {\n    todolistAPI.deleteTask(todolistID, taskID)\n        .then((res) => {\n            if (res.data.resultCode === 0)\n                dispatch(removeTaskAC(taskID, todolistID))\n        })\n}\nexport const updateTaskTC = (todolistID: string, taskID: string, updateTaskModel: UpdateTaskModelType) =>\n    (dispatch: Dispatch<TasksAT>, getState: () => AppRootStateType) => {\n        const task = getState().tasks[todolistID].find(elem => elem.id === taskID)\n        if (task) {\n            const model: UpdateTaskType = {\n                title: task.title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline,\n                ...updateTaskModel\n            }\n            todolistAPI.updateTask(todolistID, taskID, model)\n                .then((res) => {\n                    if (res.data.resultCode === 0)\n                        // dispatch(changeTaskTitleAC(todolistID, taskID, title))\n                        dispatch(updateTaskAC(res.data.data.item))\n                })\n        } else {\n            console.warn(\"Task not found in the state!!!\")\n            return\n        }\n    }\n","import React, {FC} from \"react\";\nimport {Button, Form, Modal} from \"react-bootstrap\";\nimport {useAppDispatch} from \"../../../../../common/hooks/hooks\";\nimport {updateTaskTC} from \"../../../../../bll/reducers/tasksReducer\";\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../../../../../common/types/types\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\n\n\ninterface IEditTaskForm {\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\ntype EditTaskFormPropsType = {\n    task: TaskType\n    show: boolean\n    onClose: () => void\n}\nexport const EditTaskForm: FC<EditTaskFormPropsType> = ({task, show, onClose}) => {\n\n    // const newDate = dayjs(event.currentTarget.value).format().slice(0, -6)\n    const dispatch = useAppDispatch()\n    const {register, handleSubmit, control} = useForm<IEditTaskForm>({\n        defaultValues: {\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline\n        },\n\n    });\n    const onSubmit: SubmitHandler<IEditTaskForm> = (data) => {\n        dispatch(updateTaskTC(task.todoListId, task.id, {...data}))\n        onClose()\n    }\n\n\n    return (\n        <Modal\n            show={show}\n            size=\"sm\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Modal.Header>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Editing task {task.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n\n                    {/*description*/}\n                    <Form.Group>\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control\n                            placeholder=\"Enter description\"\n                            {...register(\"description\")}/>\n\n                    </Form.Group>\n\n                    {/*statuses*/}\n                    <Form.Group>\n                        <Form.Label>Status</Form.Label>\n                        <Form.Select {...register(\"status\")}>\n                            <option value={TaskStatuses.New}>New</option>\n                            <option value={TaskStatuses.InProgress}>In progress</option>\n                            <option value={TaskStatuses.Completed}>Completed</option>\n                            <option value={TaskStatuses.Draft}>Draft</option>\n                        </Form.Select>\n                    </Form.Group>\n\n                    {/*priorities*/}\n                    <Form.Group>\n                        <Form.Label>Priority</Form.Label>\n                        <Form.Select {...register(\"priority\")}>\n                            <option value={TaskPriorities.Low}>Low</option>\n                            <option value={TaskPriorities.Middle}>Middle</option>\n                            <option value={TaskPriorities.Hi}>Hi</option>\n                            <option value={TaskPriorities.Later}>Later</option>\n                            <option value={TaskPriorities.Urgently}>Urgently</option>\n                        </Form.Select>\n                    </Form.Group>\n\n                    {/*start date*/}\n                    <Form.Group>\n                        <Form.Label>Start date</Form.Label>\n                        <Form.Control type=\"date\" {...register(\"startDate\")}/>\n                    </Form.Group>\n\n                    {/*deadline*/}\n                    <Form.Group>\n                        <Form.Label>Deadline</Form.Label>\n                        <Form.Control type=\"date\" {...register(\"deadline\")}/>\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" type=\"submit\">Submit</Button>\n                    <Button variant=\"secondary\" onClick={onClose}>Cancel</Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    )\n}\n","import {useAppDispatch} from \"../../../../../common/hooks/hooks\";\nimport {deleteTaskTC, updateTaskTC} from \"../../../../../bll/reducers/tasksReducer\";\nimport {useMemo} from \"react\";\nimport {TaskStatuses, TaskType} from \"../../../../../common/types/types\";\n\nexport const useTaskLogic = (task: TaskType) => {\n    const dispatch = useAppDispatch()\n    const deleteTask = (): void => {\n        dispatch(deleteTaskTC(task.todoListId, task.id))\n    }\n    const updateTaskTitle = (title: string): void => {\n        dispatch(updateTaskTC(task.todoListId, task.id, {title}))\n    }\n\n    const statusColor = useMemo(() => {\n        switch (task.status) {\n            case TaskStatuses.Completed:\n                return \"#e8f5e9\"\n            case TaskStatuses.New:\n                return \"#e3f2fd\"\n            case TaskStatuses.InProgress:\n                return \"#fff8e1\"\n            case TaskStatuses.Draft:\n                return \"#ffebee\"\n            default:\n                return \"#eceff1\"\n        }\n    }, [task])\n    const statusBadgeColor = useMemo(() => {\n        switch (task.status) {\n            case TaskStatuses.Completed:\n                return \"success\"\n            case TaskStatuses.New:\n                return \"primary\"\n            case TaskStatuses.InProgress:\n                return \"warning\"\n            case TaskStatuses.Draft:\n                return \"danger\"\n            default:\n                return \"secondary\"\n        }\n    }, [task])\n\n    const taskStatusText = useMemo(() => {\n        switch (task.status) {\n            case TaskStatuses.Completed:\n                return \"completed\"\n            case TaskStatuses.New:\n                return \"new\"\n            case TaskStatuses.InProgress:\n                return \"...in progress\"\n            case TaskStatuses.Draft:\n                return \"draft\"\n            default:\n                return \"\"\n        }\n    }, [task])\n\n    return {deleteTask, updateTaskTitle, statusColor, taskStatusText, statusBadgeColor}\n}","import React, {FC} from \"react\";\nimport {TaskType} from \"../../../../common/types/types\";\nimport {Badge, Card} from \"react-bootstrap\";\nimport {RiDeleteBin6Line} from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\nimport s from \"./Task.module.css\"\nimport {EditSpan} from \"../../../../common/components/EditSpan/EditSpan\";\nimport dayjs from \"dayjs\";\nimport {RiEditLine} from \"@react-icons/all-files/ri/RiEditLine\";\nimport {EditTaskForm} from \"./EditTaskForm/ModalWindow\";\nimport {useEditTaskForm} from \"./hooks/useEditTaskForm\";\nimport {useTaskLogic} from \"./hooks/useTaskLogic\";\n\n\ntype TaskPropsType = {\n    task: TaskType\n}\nexport const Task: FC<TaskPropsType> = ({\n                                            task\n                                        }) => {\n\n    const {show, onClose, onOpen} = useEditTaskForm()\n    const {deleteTask, updateTaskTitle, statusColor, taskStatusText, statusBadgeColor} = useTaskLogic(task)\n\n    return (\n        <>\n            <Card style={{margin: \"5px 0\", background: statusColor}}>\n                <Card.Body>\n                    <div style={{justifyContent: \"flex-end\", display: \"flex\"}}>\n                        <Badge bg={statusBadgeColor}>{taskStatusText}</Badge>\n                    </div>\n\n                    <Card.Title>\n                        <EditSpan title={task.title} onChangeText={updateTaskTitle}/>\n                    </Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">\n                        <span className={s.addedDate}>\n                        Created:\n                            {dayjs(task.addedDate).format(\"DD MMMM YYYY HH:mm:ss\")}\n                        </span>\n                    </Card.Subtitle>\n                    <Card.Text>\n                        Description: {task.description ? task.description : \"none\"}\n                    </Card.Text>\n                    <RiDeleteBin6Line onClick={deleteTask} className={s.deleteButton}/>\n                    <RiEditLine className={s.deleteButton} onClick={onOpen}/>\n                </Card.Body>\n            </Card>\n            <EditTaskForm task={task} show={show} onClose={onClose}/>\n        </>\n    )\n}","import {useCallback, useState} from \"react\";\n\nexport const useEditTaskForm = () => {\n    const [show, setShow] = useState<boolean>(false);\n    const onClose = useCallback(() => setShow(false), [])\n    const onOpen = () => setShow(true);\n\n    return {show, onClose, onOpen}\n}","import {ActionsAppType, FilterType, RequestStatusType, TodolistAppType, TodolistType} from \"../../common/types/types\";\nimport {todolistAPI} from \"../../api/todolistAPI\";\nimport {Dispatch} from \"redux\";\nimport {setAppStatusAC} from \"./appReducer\";\nimport {handleServerNetworkError} from \"../../common/utils/errorUtils\";\n\n\n\nexport type TodolistsAT = AddTodolistAT | RemoveTodolistAT\n    | ChangeTodolistTitleAT | ChangeTodolistFilterAT | SetTodolistsAT | ReturnType<typeof changeTodolistEntityStatusAC>\n\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\ntype ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>\ntype ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\n\nconst init_state: TodolistAppType[] = []\n\nexport const todolistsReducer = (state = init_state, action: TodolistsAT): TodolistAppType[] => {\n    switch (action.type) {\n        case \"ADD_TODOLIST\":\n            return [{...action.todolist, filter: \"all\", entityStatus: 'idle'}, ...state]\n        case \"REMOVE_TODOLIST\":\n            return state.filter(elem => elem.id !== action.id)\n        case \"CHANGE_TODOLIST_TITLE\":\n            return state.map(elem => elem.id === action.id\n                ? {...elem, title: action.title}\n                : elem\n            )\n        case \"CHANGE_TODOLIST_FILTER\":\n            return state.map(elem => elem.id === action.id\n                ? {...elem, filter: action.filter}\n                : elem\n            )\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        case \"SET_TODOLISTS\":\n            return action.todolists.map(elem => ({...elem, filter: \"all\", entityStatus: 'idle'}))\n        default:\n            return state\n    }\n}\n//action creators\nexport const addTodolistAC = (todolist: TodolistType) => {\n    return {type: \"ADD_TODOLIST\", todolist} as const\n}\nexport const removeTodolistAC = (todolistID: string) => {\n    return {type: \"REMOVE_TODOLIST\", id: todolistID} as const\n}\nexport const changeTodolistTitleAC = (todolistID: string, title: string) => {\n    return {type: \"CHANGE_TODOLIST_TITLE\", id: todolistID, title} as const\n}\nexport const changeTodolistFilterAC = (todolistID: string, filter: FilterType) => {\n    return {type: \"CHANGE_TODOLIST_FILTER\", id: todolistID, filter} as const\n}\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\n    return {type: \"SET_TODOLISTS\", todolists} as const\n}\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\n} as const)\n\n//thunk creators\nexport const getTodolictsTC = () => (dispatch: Dispatch<ActionsAppType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.getTodolists()\n        .then((res) => {\n            dispatch(setTodolistsAC(res.data))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n        .catch((e) => {\n            handleServerNetworkError(e, dispatch)\n        })\n}\nexport const deleteTodolictsTC = (todolistID: string) => (dispatch: Dispatch<ActionsAppType>) => {\n    dispatch(setAppStatusAC('loading'))\n    dispatch(changeTodolistEntityStatusAC(todolistID, 'loading'))\n    todolistAPI.deleteTodolist(todolistID)\n        .then((res) => {\n            dispatch(removeTodolistAC(todolistID))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsAppType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistAPI.createTodolist(title)\n        .then((res) => {\n            dispatch(addTodolistAC(res.data.data.item))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const changeTodolistTitleTC = (todolistID: string, title: string) => (dispatch: Dispatch<TodolistsAT>) => {\n    todolistAPI.updateTodolistTitle(todolistID, title)\n        .then((res) => {\n            dispatch(changeTodolistTitleAC(todolistID, title))\n        })\n}","import React, {ChangeEvent, KeyboardEvent, FC, useState, memo} from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\n\ntype InputPropsType = {\n    label: string\n    withButton?: boolean\n    addItem: (title: string) => void\n}\n/**\n * Creates a new input component\n *\n * params:\n *\n * label: string - required - plaseholder text\n *\n * addItem: ( arg: string ) => void - required - add value function\n *\n * withButton: boolean - draw input with button\n *\n */\nexport const Input: FC<InputPropsType> = memo(({\n                                                   label,\n                                                   withButton,\n                                                   addItem\n                                               }) => {\n    const [value, setValue] = useState<string>(\"\")\n    const [isError, setIsError] = useState<string>(\"\")\n\n    const addItemHandler = (): void => {\n        if (value.trim() !== \"\") {\n            addItem(value.trim());\n            setValue(\"\");\n        } else {\n            setIsError(\"Incorrect value\")\n        }\n    }\n\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setValue(event.currentTarget.value)\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setIsError(\"\")\n        if (event.key === \"Enter\") {\n            addItemHandler();\n            setValue(\"\");\n        }\n    }\n\n    return (\n        <>\n            <Form.Control type=\"text\"\n                          size=\"sm\"\n                          as=\"input\"\n                          value={value}\n                          placeholder={label}\n                          onChange={onChangeHandler}\n                          onBlur={() => setIsError(\"\")}\n                          onKeyPress={onKeyPressHandler}\n            />\n            {\n                isError\n                && <Form.Text muted>\n                    {isError}\n                </Form.Text>\n            }\n            {\n                withButton\n                && <Button variant=\"primary\"\n                           size=\"sm\"\n                           onClick={addItemHandler}>\n                    Add\n                </Button>\n            }\n        </>\n    )\n})","import React, {FC, memo, useCallback, useEffect} from \"react\";\nimport {FilterType, TaskStatuses, TaskType, TodolistAppType} from \"../../../common/types/types\";\nimport {Button, Card} from \"react-bootstrap\";\nimport {RiDeleteBin6Line} from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\nimport {useAppDispatch, useAppSelector} from \"../../../common/hooks/hooks\";\nimport {Task} from \"./Task/Task\";\nimport {addTaskTC, setTasksTC} from \"../../../bll/reducers/tasksReducer\";\nimport s from \"./Todolist.module.css\"\nimport {changeTodolistTitleTC, deleteTodolictsTC} from \"../../../bll/reducers/todolistsReducer\";\nimport {EditSpan} from \"../../../common/components/EditSpan/EditSpan\";\nimport {Input} from \"../../../common/components/Input/Input\";\n\ntype TodolistType = {\n    todolist: TodolistAppType\n    changeTodolistFilter: (todolistID: string, filter: FilterType) => void\n}\nexport const Todolist: FC<TodolistType> = memo(({\n                                                    todolist,\n                                                    changeTodolistFilter\n                                                }) => {\n    const dispatch = useAppDispatch()\n    useEffect(() => {\n        dispatch(setTasksTC(todolist.id))\n    }, [todolist.id, dispatch])\n\n    let tasks = useAppSelector<TaskType[]>(state => state.tasks[todolist.id])\n    if (todolist.filter === \"active\") {\n        tasks = tasks.filter(t => t.status === TaskStatuses.New);\n    }\n    if (todolist.filter === \"completed\") {\n        tasks = tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n    const deleteTodolist = (): void => {\n        dispatch(deleteTodolictsTC(todolist.id))\n    }\n    const changeTodolistTitle = useCallback((title: string): void => {\n        dispatch(changeTodolistTitleTC(todolist.id, title))\n    }, [dispatch, todolist.id])\n    const addTask = useCallback((title: string): void => {\n        dispatch(addTaskTC(todolist.id, title))\n    }, [dispatch, todolist.id])\n\n    const onAllClickHandler = useCallback(() => changeTodolistFilter(todolist.id, \"all\"), [todolist.id, changeTodolistFilter])\n    const onActiveClickHandler = useCallback(() => changeTodolistFilter(todolist.id, \"active\"), [todolist.id, changeTodolistFilter])\n    const onCompletedClickHandler = useCallback(() => changeTodolistFilter(todolist.id, \"completed\"), [todolist.id, changeTodolistFilter])\n\n    return (\n        <div className={s.container}>\n            <Card style={{width: \"100%\"}}>\n                <Card.Header style={{textAlign: \"right\"}}>\n                    <RiDeleteBin6Line onClick={deleteTodolist} className={s.deleteButton}/>\n                    <Card.Title style={{textAlign: \"left\"}}>\n                        <EditSpan title={todolist.title} onChangeText={changeTodolistTitle}/>\n                    </Card.Title>\n                </Card.Header>\n                <Input label=\"Add task\" addItem={addTask} withButton={true}/>\n                <Card.Body>\n                    {\n                        tasks.map(elem => <Task task={elem}\n                                                key={elem.id}\n                        />)\n                    }\n\n                </Card.Body>\n                <Card.Footer className={s.cardFooter}>\n                    <Button variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={onAllClickHandler}>\n                        all\n                    </Button>\n                    <Button variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={onActiveClickHandler}>\n                        active\n                    </Button>\n                    <Button variant=\"outline-primary\"\n                            size=\"sm\"\n                            onClick={onCompletedClickHandler}>\n                        completed\n                    </Button>\n                </Card.Footer>\n            </Card>\n\n        </div>\n    )\n})","import {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\nimport {useCallback, useEffect} from \"react\";\nimport {addTodolistTC, changeTodolistFilterAC, getTodolictsTC} from \"../../bll/reducers/todolistsReducer\";\nimport {FilterType} from \"../../common/types/types\";\nimport {useNavigate} from \"react-router-dom\";\n\n\nexport const useTodolists = () => {\n    const dispatch = useAppDispatch()\n    const navigate = useNavigate()\n    const todolists = useAppSelector(state => state.todolists)\n\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    !isLoggedIn && navigate('/login')\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            dispatch(getTodolictsTC())\n        }\n    }, [dispatch, isLoggedIn])\n\n    useEffect(() => {\n        dispatch(getTodolictsTC())\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string): void => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    const changeTodolistFilter = useCallback((todolistID: string, filter: FilterType): void => {\n        dispatch(changeTodolistFilterAC(todolistID, filter))\n    }, [dispatch])\n\n    return {todolists, addTodolist, changeTodolistFilter}\n}\n","import React, {FC} from \"react\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {Input} from \"../../common/components/Input/Input\";\nimport {useTodolists} from \"../../app/hooks/useTodolists\";\n\n\nexport const TodolistList: FC = () => {\n    const {todolists, addTodolist, changeTodolistFilter} = useTodolists()\n\n    return (\n        <div>\n            <header className=\"AppHeader\">\n                <Input label=\"Add todolist\" addItem={addTodolist}/>\n            </header>\n            <div className=\"App\">\n\n                {\n                    todolists.map(elem => <Todolist todolist={elem}\n                                                    changeTodolistFilter={changeTodolistFilter}\n                                                    key={elem.id}\n                    />)\n                }\n            </div>\n        </div>\n    )\n}","import React, {FC} from \"react\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {Login} from \"../../features/Login/Login\";\nimport {TodolistList} from \"../../features/TodolistList/TodolistList\";\n\nexport const AppRoutes:FC = () => {\n    return (\n        <Routes>\n            <Route path='/' element={<TodolistList/>}/>\n            <Route path='login' element={<Login/>}/>\n            <Route path='*' element={<Navigate to='/404'/>}/>\n            <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\n        </Routes>\n    )\n}","import React, {FC} from \"react\";\nimport {Button, Container, Navbar} from \"react-bootstrap\";\nimport {useAppDispatch, useAppSelector} from \"../../../common/hooks/hooks\";\nimport {logoutTC} from \"../../../bll/reducers/authReducer\";\n\nexport const NavBar: FC = () => {\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useAppDispatch()\n    const logOutHandler = () => {\n        dispatch(logoutTC())\n    }\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Container>\n                <Navbar.Brand href=\"/\" >Todolist App</Navbar.Brand>\n                {isLoggedIn && <Button onClick={logOutHandler}> Log out</Button>}\n            </Container>\n        </Navbar>\n    )\n}","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {AppRoutes} from \"./AppRoutes/AppRoutes\";\r\nimport {useAppDispatch, useAppSelector} from \"../common/hooks/hooks\";\r\nimport {RequestStatusType} from \"../common/types/types\";\r\nimport {meTC} from \"../bll/reducers/authReducer\";\r\nimport {ProgressBar, Spinner} from \"react-bootstrap\";\r\nimport {NavBar} from \"../features/TodolistList/NavBar/NavBar\";\r\n\r\n\r\nfunction App() {\r\n    const status = useAppSelector<RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useAppSelector<boolean>((state) => state.app.isInitialized)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(meTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <Spinner animation=\"border\" variant=\"primary\"/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            {status === 'loading' && <ProgressBar animated now={100}/>}\r\n            <AppRoutes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, legacy_createStore} from \"redux\";\nimport {todolistsReducer} from \"./reducers/todolistsReducer\";\nimport {tasksReducer} from \"./reducers/tasksReducer\";\nimport thunk from \"redux-thunk\"\nimport {appReducer} from \"./reducers/appReducer\";\nimport {authReducer} from \"./reducers/authReducer\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./app/App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_message\":\"Login_error_message__1y_Nd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accHeader\":\"Task_accHeader__20Eze\",\"deleteButton\":\"Task_deleteButton__2svut\",\"addedDate\":\"Task_addedDate__A5RKq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todolist_container__3GBGW\",\"deleteButton\":\"Todolist_deleteButton__1A7B9\",\"cardFooter\":\"Todolist_cardFooter__3sjJA\"};"],"sourceRoot":""}