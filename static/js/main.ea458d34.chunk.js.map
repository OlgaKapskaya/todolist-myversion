{"version":3,"sources":["components/Todolist/Todolist.module.css","common/types/types.ts","common/hooks/hooks.ts","api/todolistAPI.ts","bll/reducers/todolistsReducer.ts","components/Todolist/Tasks/Task.tsx","bll/reducers/tasksReducer.ts","components/EditSpan/EditSpan.tsx","components/Todolist/Todolist.tsx","components/Input/Input.tsx","containers/App.tsx","serviceWorker.ts","bll/store.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","useAppDispatch","useDispatch","useAppSelector","useSelector","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistID","delete","put","init_state","Task","task","Accordion","Header","style","textAlign","RiDeleteBin6Line","Body","description","ListGroup","variant","Item","status","priority","startDate","deadline","initState","EditSpan","memo","onChangeText","useState","isEditMode","setIsEditMode","text","setText","offEditMode","changeText","Form","Control","type","size","as","value","onChange","event","currentTarget","onBlur","onKeyPress","key","autoFocus","onDoubleClick","Todolist","filter","dispatch","useEffect","then","res","tasks","setTasksAC","data","items","setTasksTC","state","t","New","Completed","changeTodolistTitle","useCallback","id","changeTodolistTitleAC","changeTodolistTitleTC","className","s","container","Card","width","onClick","removeTodolistAC","deleteTodolictsTC","deleteButton","Title","map","elem","Footer","Button","Input","label","addItem","setValue","isError","setIsError","placeholder","trim","Text","muted","App","todolists","addTodolist","todolist","item","addTodolistTC","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","taskID","newTask","v1","todoListId","taskTitle","Urgently","Date","addedDate","newTitle","stateCopy","forEach","store","legacy_createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea458d34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Todolist_container__2Zimt\",\"deleteButton\":\"Todolist_deleteButton__2G12D\"};","import {TodolistsAT} from \"../../bll/reducers/todolistsReducer\";\nimport {TasksAT} from \"../../bll/reducers/tasksReducer\";\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type TodolistAppType = TodolistType & { filter : FilterType }\n\nexport type TaskType = {\n    id: string\n    todoListId: string\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: Date\n    deadline: Date\n    addedDate: Date\n}\nexport type TaskAppType = {\n    [key: string] : TaskType[]\n}\n\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: Date\n    deadline: Date\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type FilterType = \"all\" | \"active\" | \"completed\"\nexport type ActionsAppType = TodolistsAT | TasksAT","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport {ActionsAppType} from \"../types/types\";\nimport {AppRootStateType} from \"../../bll/store\";\n\nexport const useAppDispatch: () => ThunkDispatch<AppRootStateType, any, ActionsAppType> = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> =  useSelector","import axios from \"axios\"\nimport {TaskType, TodolistType, UpdateTaskType} from \"../common/types/types\";\n\ntype ResponseType<D = {}> = {\n    data: D\n    fieldsErrors: string[]\n    messages: string[]\n    resultCode: number\n}\ntype GetTasksResponseType = {\n    items: TaskType[]\n    totalCount: number\n    error: string | null\n}\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"a3689f8d-4bdb-4cdd-9a1a-83733437adfc\"\n    }\n})\n\nexport const todolistAPI = {\n    getTodolists(){\n        return instance.get<TodolistType[]>(\"todo-lists\")\n    },\n    addTodolist(title: string){\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", { title })\n    },\n    deleteTodolist(todolistID: string){\n        return instance.delete<ResponseType>(`todo-lists/${todolistID}`)\n    },\n    updateTodolistTitle(todolistID: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistID}`, {title})\n    },\n    getTasks(todolistID: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistID}/tasks`)\n    },\n    createTask(todolistID: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistID}/tasks`, {title})\n    },\n    deleteTask(todolistID: string, taskID: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistID}/tasks/${taskID}`)\n    },\n    updateTask(todolistID: string, taskID: string, task: UpdateTaskType) {\n        return instance.put<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistID}/tasks/${taskID}`, task)\n    }\n}","import {FilterType, TodolistAppType, TodolistType} from \"../../common/types/types\";\nimport {todolistAPI} from \"../../api/todolistAPI\";\nimport {Dispatch} from \"redux\";\n\nexport type TodolistsAT = AddTodolistAT | RemoveTodolistAT\n    | ChangeTodolistTitleAT | ChangeTodolistFilterAT | SetTodolistsAT\n\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\ntype ChangeTodolistTitleAT = ReturnType<typeof changeTodolistTitleAC>\ntype ChangeTodolistFilterAT = ReturnType<typeof changeTodolistFilterAC>\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\n\nconst init_state: TodolistAppType[] = []\n\nexport const todolistsReducer = (state = init_state, action: TodolistsAT): TodolistAppType[] => {\n    switch (action.type) {\n        case \"ADD_TODOLIST\":\n            return [{...action.todolist, filter: \"all\"}, ...state]\n        case \"REMOVE_TODOLIST\":\n            return state.filter(elem => elem.id !== action.id)\n        case \"CHANGE_TODOLIST_TITLE\":\n            return state.map(elem => elem.id === action.id\n                ? {...elem, title: action.title}\n                : elem\n            )\n        case \"CHANGE_TODOLIST_FILTER\":\n            return state.map(elem => elem.id === action.id\n                ? {...elem, filter: action.filter}\n                : elem\n            )\n        case \"SET_TODOLISTS\":\n            return action.todolists.map( elem => ({ ...elem, filter: \"all\"}))\n        default:\n            return state\n    }\n}\n//action creators\nexport const addTodolistAC = (todolist: TodolistType) => {\n    return {type: \"ADD_TODOLIST\", todolist} as const\n}\nexport const removeTodolistAC = (todolistID: string) => {\n    return {type: \"REMOVE_TODOLIST\", id: todolistID} as const\n}\nexport const changeTodolistTitleAC = (todolistID: string, title: string) => {\n    return {type: \"CHANGE_TODOLIST_TITLE\", id: todolistID, title} as const\n}\nexport const changeTodolistFilterAC = (todolistID: string, filter: FilterType) => {\n    return {type: \"CHANGE_TODOLIST_FILTER\", id: todolistID, filter} as const\n}\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\n    return {type: \"SET_TODOLISTS\", todolists} as const\n}\n\n//thunk creators\nexport const getTodolictsTC = () => (dispatch: Dispatch<TodolistsAT>) => {\n    todolistAPI.getTodolists()\n        .then((res) => {\n            dispatch(setTodolistsAC(res.data))\n        })\n}\nexport const deleteTodolictsTC = (todolistID: string) => (dispatch: Dispatch<TodolistsAT>) => {\n    todolistAPI.deleteTodolist(todolistID)\n        .then((res) => {\n            dispatch(removeTodolistAC(todolistID))\n        })\n}\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<TodolistsAT>) => {\n    todolistAPI.addTodolist(title)\n        .then((res) => {\n            dispatch(addTodolistAC(res.data.data.item))\n        })\n}\nexport const changeTodolistTitleTC = (todolistID: string, title: string) => (dispatch: Dispatch<TodolistsAT>) => {\n    todolistAPI.updateTodolistTitle(todolistID, title)\n        .then((res) => {\n            dispatch(changeTodolistTitleAC(todolistID, title))\n        })\n}","import React, {FC} from \"react\";\nimport {TaskType} from \"../../../common/types/types\";\nimport {useAppDispatch} from \"../../../common/hooks/hooks\";\nimport {Accordion, ListGroup} from \"react-bootstrap\";\nimport {RiDeleteBin6Line} from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistID: string\n}\nexport const Task: FC<TaskPropsType> = ({\n                                            task,\n                                            todolistID\n                                        }) => {\n    const dispatch = useAppDispatch()\n\n    return (\n        <>\n            <Accordion>\n                <Accordion.Header style={{textAlign: \"right\"}}>\n                    <RiDeleteBin6Line/>\n                    {task.title}\n                </Accordion.Header>\n\n                <Accordion.Body>\n                    {task.description}\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>Status: {task.status}</ListGroup.Item>\n                        <ListGroup.Item>Priority: {task.priority}</ListGroup.Item>\n                        <ListGroup.Item>Start date: {task.startDate}</ListGroup.Item>\n                        <ListGroup.Item> Deadline: {task.deadline}</ListGroup.Item>\n                    </ListGroup>\n                </Accordion.Body>\n            </Accordion>\n        </>\n    )\n}","import {ActionsAppType, TaskAppType, TaskPriorities, TaskStatuses, TaskType} from \"../../common/types/types\";\nimport {v1} from \"uuid\";\nimport {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from \"./todolistsReducer\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"../store\";\nimport {todolistAPI} from \"../../api/todolistAPI\";\n\nexport type TasksAT = RemoveTaskAT | AddTaskAT\n    | ChangeTaskStatusAT | ChangeTaskTitleAT\n    | AddTodolistAT | RemoveTodolistAT\n    | SetTodolistsAT | SetTasksAT\n\n//action type\ntype RemoveTaskAT = ReturnType<typeof removeTaskAC>\ntype AddTaskAT = ReturnType<typeof addTaskAC>\ntype ChangeTaskStatusAT = ReturnType<typeof changeTaskStatusAC>\ntype ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\ntype SetTasksAT = ReturnType<typeof setTasksAC>\n\n\nconst initState: TaskAppType = {}\n\nexport const tasksReducer = (state = initState, action: TasksAT): TaskAppType => {\n    switch (action.type) {\n        case \"REMOVE_TASK\":\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)}\n        case \"ADD_TASK\":\n            const newTask: TaskType = {\n                id: v1(),\n                todoListId: action.todolistID,\n                title: action.taskTitle,\n                description: '',\n                status: TaskStatuses.New,\n                priority: TaskPriorities.Urgently,\n                startDate: new Date(),\n                deadline: new Date(),\n                addedDate: new Date()\n            }\n            return {\n                ...state,\n                [action.todolistID]: [newTask, ...state[action.todolistID]]\n            }\n        case \"CHANGE_TASK_STATUS\":\n            return {\n                ...state, [action.todolistID]: state[action.todolistID].map(elem => {\n                    return elem.id === action.taskID ? {...elem, status: action.status} : elem\n                })\n            }\n        case \"CHANGE_TASK_TITLE\":\n            return {\n                ...state,\n                [action.todolistID]: state[action.todolistID].map(elem => elem.id === action.taskID ? {\n                    ...elem,\n                    title: action.newTitle\n                } : elem)\n            }\n        case \"ADD_TODOLIST\":\n            return {...state, [action.todolist.id]: []}\n        case \"REMOVE_TODOLIST\": {\n            let stateCopy = {...state}\n            delete stateCopy[action.id]\n            return stateCopy\n        }\n        case \"SET_TODOLISTS\": {\n            const stateCopy = {...state}\n            action.todolists.forEach((elem) => {\n                stateCopy[elem.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET_TASKS\": {\n            return {...state, [action.todolistID]: action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\n//action creators\nexport const removeTaskAC = (taskID: string, todolistID: string) => {\n    return {type: \"REMOVE_TASK\", taskID, todolistID} as const\n}\nexport const addTaskAC = (taskTitle: string, todolistID: string) => {\n    return {type: \"ADD_TASK\", taskTitle, todolistID} as const\n}\nexport const changeTaskStatusAC = (taskID: string, status: TaskStatuses, todolistID: string) => {\n    return {type: \"CHANGE_TASK_STATUS\", taskID, status, todolistID} as const\n}\nexport const changeTaskTitleAC = (taskID: string, newTitle: string, todolistID: string) => {\n    return {type: \"CHANGE_TASK_TITLE\", taskID, newTitle, todolistID} as const\n}\nexport const setTasksAC = (todolistID: string, tasks: TaskType[]) => {\n    return {type: \"SET_TASKS\", todolistID, tasks} as const\n}\n\n\n//thunk creators\nexport const setTasksTC = (todolistID: string) => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsAppType>) => {\n    todolistAPI.getTasks(todolistID)\n        .then((res) => {\n            dispatch(setTasksAC(todolistID, res.data.items))\n        })\n}","import React, {FC, useState, KeyboardEvent, ChangeEvent, memo} from \"react\";\nimport { Form } from \"react-bootstrap\";\n\ntype EditSpanPropsType = {\n    title: string\n    onChangeText: (title: string) => void\n}\nexport const EditSpan: FC<EditSpanPropsType> = memo(({title, onChangeText}) => {\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\n    const [text, setText] = useState<string>(\"\")\n\n    const onEditMode = (): void => {\n        setText(title)\n        setIsEditMode(true)\n    }\n    const offEditMode = (): void => {\n        setIsEditMode(false)\n        changeText()\n    }\n    const changeText = (): void => {\n        if (text !== \"\") {\n            onChangeText(text)\n            setIsEditMode(false)\n        }\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        if (event.key === \"Enter\") {\n            changeText()\n            offEditMode()\n        }\n    }\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setText(event.currentTarget.value)\n    }\n    return (\n        <>\n            {\n                isEditMode ?\n                    <Form.Control type=\"text\"\n                                  size=\"sm\"\n                                  as=\"input\"\n                                  value={text}\n                                  onChange={onChangeHandler}\n                                  onBlur={offEditMode}\n                                  onKeyPress={onKeyPressHandler}\n                                  autoFocus\n                    />\n\n                    : <span onDoubleClick={onEditMode}> {title} </span>\n            }\n        </>\n    )\n})","import React, {FC, useCallback, useEffect} from \"react\";\nimport {FilterType, TaskStatuses, TaskType} from \"../../common/types/types\";\nimport {Button, Card} from \"react-bootstrap\";\nimport {RiDeleteBin6Line} from \"@react-icons/all-files/ri/RiDeleteBin6Line\";\nimport {useAppDispatch, useAppSelector} from \"../../common/hooks/hooks\";\nimport {Task} from \"./Tasks/Task\";\nimport {setTasksTC} from \"../../bll/reducers/tasksReducer\";\nimport s from \"./Todolist.module.css\"\nimport {changeTodolistTitleTC, deleteTodolictsTC} from \"../../bll/reducers/todolistsReducer\";\nimport {EditSpan} from \"../EditSpan/EditSpan\";\n\ntype TodolistType = {\n    todolistID: string\n    title: string\n    filter: FilterType\n}\nexport const Todolist: FC<TodolistType> = ({\n                                               todolistID,\n                                               title,\n                                               filter\n                                           }) => {\n    const dispatch = useAppDispatch()\n    useEffect(() => {\n        dispatch(setTasksTC(todolistID))\n    }, [todolistID, dispatch])\n\n    let tasks = useAppSelector<TaskType[]>(state => state.tasks[todolistID])\n    if (filter === \"active\") {\n        tasks = tasks.filter(t => t.status === TaskStatuses.New);\n    }\n    if (filter === \"completed\") {\n        tasks = tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n    const onClickDeleteHandler = (): void => {\n        dispatch(deleteTodolictsTC(todolistID))\n    }\n    const changeTodolistTitle = useCallback((title: string): void => {\n        dispatch(changeTodolistTitleTC(todolistID, title))\n    }, [dispatch])\n    return (\n            <div className={s.container}>\n                <Card style={{width: \"100%\"}}>\n                    <Card.Header style={{textAlign: \"right\"}}>\n                        <RiDeleteBin6Line onClick={onClickDeleteHandler} className={s.deleteButton}/>\n                        <Card.Title style={{textAlign: \"left\"}}>\n                            <EditSpan title={title} onChangeText={changeTodolistTitle}/>\n                        </Card.Title>\n                    </Card.Header>\n\n                    <Card.Body>\n                        {\n                            tasks\n                            && tasks.map(elem => <Task task={elem}\n                                                       key={elem.id}\n                                                       todolistID={todolistID}/>)\n                        }\n\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button variant=\"outline-primary\" size=\"sm\">all</Button>\n                        <Button variant=\"outline-primary\" size=\"sm\">active</Button>\n                        <Button variant=\"outline-primary\" size=\"sm\">completed</Button>\n                    </Card.Footer>\n                </Card>\n\n            </div>\n    )\n}","import React, {ChangeEvent, KeyboardEvent, FC, useState, memo} from \"react\";\nimport {Form} from \"react-bootstrap\";\n\ntype InputPropsType = {\n    label: string\n    addItem: (title: string) => void\n}\nexport const Input: FC<InputPropsType> = memo(({\n                                              label,\n                                              addItem\n                                          }) => {\n    const [value, setValue] = useState<string>(\"\")\n    const [isError, setIsError] = useState<string>(\"\")\n\n    const addItemHandler = (): void => {\n        if (value.trim() !== \"\") {\n            addItem(value.trim());\n            setValue(\"\");\n        } else {\n            setIsError(\"Incorrect value\")\n        }\n    }\n\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setValue(event.currentTarget.value)\n    }\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setIsError(\"\")\n        if (event.key === \"Enter\") {\n            addItemHandler();\n            setValue(\"\");\n        }\n    }\n\n    return (\n        <>\n            <Form.Control type=\"text\"\n                          size=\"sm\"\n                          as=\"input\"\n                          value={value}\n                          placeholder={label}\n                          onChange={onChangeHandler}\n                          onBlur={() => setIsError(\"\")}\n                          onKeyPress={onKeyPressHandler}\n            />\n            {\n                isError\n                && <Form.Text muted>\n                    {isError}\n                </Form.Text>\n            }\n\n        </>\n    )\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {useAppDispatch, useAppSelector} from \"../common/hooks/hooks\";\r\nimport {addTodolistTC, getTodolictsTC} from \"../bll/reducers/todolistsReducer\";\r\nimport {Todolist} from \"../components/Todolist/Todolist\";\r\nimport {Input} from \"../components/Input/Input\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useAppDispatch()\r\n    const todolists = useAppSelector(state => state.todolists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolictsTC())\r\n\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string): void => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <header className=\"AppHeader\">\r\n                <Input label=\"Add todolist\" addItem={addTodolist}/>\r\n            </header>\r\n            <div className=\"App\">\r\n\r\n                {todolists && todolists.map(elem => <Todolist todolistID={elem.id}\r\n                                                              key={elem.id}\r\n                                                              title={elem.title}\r\n                                                              filter={elem.filter}/>)\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, legacy_createStore} from \"redux\";\nimport {todolistsReducer} from \"./reducers/todolistsReducer\";\nimport {tasksReducer} from \"./reducers/tasksReducer\";\nimport thunk from \"redux-thunk\"\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer\n})\n\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}